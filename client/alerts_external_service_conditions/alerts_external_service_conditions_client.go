// Code generated by go-swagger; DO NOT EDIT.

package alerts_external_service_conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new alerts external service conditions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for alerts external service conditions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
V2AlertsExternalServiceConditionsJSONByConditionIDDelete deletes

Delete
*/
func (a *Client) V2AlertsExternalServiceConditionsJSONByConditionIDDelete(params *V2AlertsExternalServiceConditionsJSONByConditionIDDeleteParams) (*V2AlertsExternalServiceConditionsJSONByConditionIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsExternalServiceConditionsJSONByConditionIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsExternalServiceConditionsJsonByConditionIdDelete",
		Method:             "DELETE",
		PathPattern:        "/v2/alerts_external_service_conditions/{condition_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsExternalServiceConditionsJSONByConditionIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsExternalServiceConditionsJSONByConditionIDDeleteOK), nil

}

/*
V2AlertsExternalServiceConditionsJSONByIDPut updates

Update
*/
func (a *Client) V2AlertsExternalServiceConditionsJSONByIDPut(params *V2AlertsExternalServiceConditionsJSONByIDPutParams) (*V2AlertsExternalServiceConditionsJSONByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsExternalServiceConditionsJSONByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsExternalServiceConditionsJsonByIdPut",
		Method:             "PUT",
		PathPattern:        "/v2/alerts_external_service_conditions/{condition_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsExternalServiceConditionsJSONByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsExternalServiceConditionsJSONByIDPutOK), nil

}

/*
V2AlertsExternalServiceConditionsJSONGet lists

List
*/
func (a *Client) V2AlertsExternalServiceConditionsJSONGet(params *V2AlertsExternalServiceConditionsJSONGetParams) (*V2AlertsExternalServiceConditionsJSONGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsExternalServiceConditionsJSONGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsExternalServiceConditionsJsonGet",
		Method:             "GET",
		PathPattern:        "/v2/alerts_external_service_conditions.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsExternalServiceConditionsJSONGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsExternalServiceConditionsJSONGetOK), nil

}

/*
V2AlertsExternalServiceConditionsPoliciesJSONByPolicyIDPost creates

Create
*/
func (a *Client) V2AlertsExternalServiceConditionsPoliciesJSONByPolicyIDPost(params *V2AlertsExternalServiceConditionsPoliciesJSONByPolicyIDPostParams) (*V2AlertsExternalServiceConditionsPoliciesJSONByPolicyIDPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsExternalServiceConditionsPoliciesJSONByPolicyIDPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsExternalServiceConditionsPoliciesJsonByPolicyIdPost",
		Method:             "POST",
		PathPattern:        "/v2/alerts_external_service_conditions/policies/{policy_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsExternalServiceConditionsPoliciesJSONByPolicyIDPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsExternalServiceConditionsPoliciesJSONByPolicyIDPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
