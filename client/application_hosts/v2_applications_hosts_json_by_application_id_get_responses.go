// Code generated by go-swagger; DO NOT EDIT.

package application_hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/burck1/go-newrelic/models"
)

// V2ApplicationsHostsJSONByApplicationIDGetReader is a Reader for the V2ApplicationsHostsJSONByApplicationIDGet structure.
type V2ApplicationsHostsJSONByApplicationIDGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V2ApplicationsHostsJSONByApplicationIDGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewV2ApplicationsHostsJSONByApplicationIDGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewV2ApplicationsHostsJSONByApplicationIDGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewV2ApplicationsHostsJSONByApplicationIDGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewV2ApplicationsHostsJSONByApplicationIDGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewV2ApplicationsHostsJSONByApplicationIDGetOK creates a V2ApplicationsHostsJSONByApplicationIDGetOK with default headers values
func NewV2ApplicationsHostsJSONByApplicationIDGetOK() *V2ApplicationsHostsJSONByApplicationIDGetOK {
	return &V2ApplicationsHostsJSONByApplicationIDGetOK{}
}

/*V2ApplicationsHostsJSONByApplicationIDGetOK handles this case with default header values.

OK
*/
type V2ApplicationsHostsJSONByApplicationIDGetOK struct {
	Payload *models.ApplicationHostResponse
}

func (o *V2ApplicationsHostsJSONByApplicationIDGetOK) Error() string {
	return fmt.Sprintf("[GET /v2/applications/{application_id}/hosts.json][%d] v2ApplicationsHostsJsonByApplicationIdGetOK  %+v", 200, o.Payload)
}

func (o *V2ApplicationsHostsJSONByApplicationIDGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApplicationHostResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ApplicationsHostsJSONByApplicationIDGetUnauthorized creates a V2ApplicationsHostsJSONByApplicationIDGetUnauthorized with default headers values
func NewV2ApplicationsHostsJSONByApplicationIDGetUnauthorized() *V2ApplicationsHostsJSONByApplicationIDGetUnauthorized {
	return &V2ApplicationsHostsJSONByApplicationIDGetUnauthorized{}
}

/*V2ApplicationsHostsJSONByApplicationIDGetUnauthorized handles this case with default header values.

Invalid API key
*/
type V2ApplicationsHostsJSONByApplicationIDGetUnauthorized struct {
	Payload interface{}
}

func (o *V2ApplicationsHostsJSONByApplicationIDGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/applications/{application_id}/hosts.json][%d] v2ApplicationsHostsJsonByApplicationIdGetUnauthorized  %+v", 401, o.Payload)
}

func (o *V2ApplicationsHostsJSONByApplicationIDGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ApplicationsHostsJSONByApplicationIDGetForbidden creates a V2ApplicationsHostsJSONByApplicationIDGetForbidden with default headers values
func NewV2ApplicationsHostsJSONByApplicationIDGetForbidden() *V2ApplicationsHostsJSONByApplicationIDGetForbidden {
	return &V2ApplicationsHostsJSONByApplicationIDGetForbidden{}
}

/*V2ApplicationsHostsJSONByApplicationIDGetForbidden handles this case with default header values.

New Relic API access has not been enabled
*/
type V2ApplicationsHostsJSONByApplicationIDGetForbidden struct {
	Payload interface{}
}

func (o *V2ApplicationsHostsJSONByApplicationIDGetForbidden) Error() string {
	return fmt.Sprintf("[GET /v2/applications/{application_id}/hosts.json][%d] v2ApplicationsHostsJsonByApplicationIdGetForbidden  %+v", 403, o.Payload)
}

func (o *V2ApplicationsHostsJSONByApplicationIDGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ApplicationsHostsJSONByApplicationIDGetDefault creates a V2ApplicationsHostsJSONByApplicationIDGetDefault with default headers values
func NewV2ApplicationsHostsJSONByApplicationIDGetDefault(code int) *V2ApplicationsHostsJSONByApplicationIDGetDefault {
	return &V2ApplicationsHostsJSONByApplicationIDGetDefault{
		_statusCode: code,
	}
}

/*V2ApplicationsHostsJSONByApplicationIDGetDefault handles this case with default header values.

A server error occurred, please contact <a href="http://support.newrelic.com">New Relic support</a>
*/
type V2ApplicationsHostsJSONByApplicationIDGetDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the v2 applications hosts Json by application Id get default response
func (o *V2ApplicationsHostsJSONByApplicationIDGetDefault) Code() int {
	return o._statusCode
}

func (o *V2ApplicationsHostsJSONByApplicationIDGetDefault) Error() string {
	return fmt.Sprintf("[GET /v2/applications/{application_id}/hosts.json][%d] V2ApplicationsHostsJsonByApplicationIdGet default  %+v", o._statusCode, o.Payload)
}

func (o *V2ApplicationsHostsJSONByApplicationIDGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
