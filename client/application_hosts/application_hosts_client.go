// Code generated by go-swagger; DO NOT EDIT.

package application_hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new application hosts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for application hosts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
V2ApplicationsHostsJSONByApplicationIDAndIDGet shows

Show
*/
func (a *Client) V2ApplicationsHostsJSONByApplicationIDAndIDGet(params *V2ApplicationsHostsJSONByApplicationIDAndIDGetParams) (*V2ApplicationsHostsJSONByApplicationIDAndIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsHostsJSONByApplicationIDAndIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsHostsJsonByApplicationIdAndIdGet",
		Method:             "GET",
		PathPattern:        "/v2/applications/{application_id}/hosts/{host_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsHostsJSONByApplicationIDAndIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsHostsJSONByApplicationIDAndIDGetOK), nil

}

/*
V2ApplicationsHostsJSONByApplicationIDGet lists

List
*/
func (a *Client) V2ApplicationsHostsJSONByApplicationIDGet(params *V2ApplicationsHostsJSONByApplicationIDGetParams) (*V2ApplicationsHostsJSONByApplicationIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsHostsJSONByApplicationIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsHostsJsonByApplicationIdGet",
		Method:             "GET",
		PathPattern:        "/v2/applications/{application_id}/hosts.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsHostsJSONByApplicationIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsHostsJSONByApplicationIDGetOK), nil

}

/*
V2ApplicationsHostsMetricsDataJSONByApplicationIDAndHostIDGet data

Metric Data
*/
func (a *Client) V2ApplicationsHostsMetricsDataJSONByApplicationIDAndHostIDGet(params *V2ApplicationsHostsMetricsDataJSONByApplicationIDAndHostIDGetParams) (*V2ApplicationsHostsMetricsDataJSONByApplicationIDAndHostIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsHostsMetricsDataJSONByApplicationIDAndHostIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsHostsMetricsDataJsonByApplicationIdAndHostIdGet",
		Method:             "GET",
		PathPattern:        "/v2/applications/{application_id}/hosts/{host_id}/metrics/data.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsHostsMetricsDataJSONByApplicationIDAndHostIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsHostsMetricsDataJSONByApplicationIDAndHostIDGetOK), nil

}

/*
V2ApplicationsHostsMetricsJSONByApplicationIDAndHostIDGet names

Metric Names
*/
func (a *Client) V2ApplicationsHostsMetricsJSONByApplicationIDAndHostIDGet(params *V2ApplicationsHostsMetricsJSONByApplicationIDAndHostIDGetParams) (*V2ApplicationsHostsMetricsJSONByApplicationIDAndHostIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsHostsMetricsJSONByApplicationIDAndHostIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsHostsMetricsJsonByApplicationIdAndHostIdGet",
		Method:             "GET",
		PathPattern:        "/v2/applications/{application_id}/hosts/{host_id}/metrics.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsHostsMetricsJSONByApplicationIDAndHostIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsHostsMetricsJSONByApplicationIDAndHostIDGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
