// Code generated by go-swagger; DO NOT EDIT.

package alerts_nrql_conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/burck1/go-newrelic/models"
)

// NewV2AlertsNrqlConditionsJSONByIDPutParams creates a new V2AlertsNrqlConditionsJSONByIDPutParams object
// with the default values initialized.
func NewV2AlertsNrqlConditionsJSONByIDPutParams() *V2AlertsNrqlConditionsJSONByIDPutParams {
	var ()
	return &V2AlertsNrqlConditionsJSONByIDPutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV2AlertsNrqlConditionsJSONByIDPutParamsWithTimeout creates a new V2AlertsNrqlConditionsJSONByIDPutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV2AlertsNrqlConditionsJSONByIDPutParamsWithTimeout(timeout time.Duration) *V2AlertsNrqlConditionsJSONByIDPutParams {
	var ()
	return &V2AlertsNrqlConditionsJSONByIDPutParams{

		timeout: timeout,
	}
}

// NewV2AlertsNrqlConditionsJSONByIDPutParamsWithContext creates a new V2AlertsNrqlConditionsJSONByIDPutParams object
// with the default values initialized, and the ability to set a context for a request
func NewV2AlertsNrqlConditionsJSONByIDPutParamsWithContext(ctx context.Context) *V2AlertsNrqlConditionsJSONByIDPutParams {
	var ()
	return &V2AlertsNrqlConditionsJSONByIDPutParams{

		Context: ctx,
	}
}

// NewV2AlertsNrqlConditionsJSONByIDPutParamsWithHTTPClient creates a new V2AlertsNrqlConditionsJSONByIDPutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV2AlertsNrqlConditionsJSONByIDPutParamsWithHTTPClient(client *http.Client) *V2AlertsNrqlConditionsJSONByIDPutParams {
	var ()
	return &V2AlertsNrqlConditionsJSONByIDPutParams{
		HTTPClient: client,
	}
}

/*V2AlertsNrqlConditionsJSONByIDPutParams contains all the parameters to send to the API endpoint
for the v2 alerts nrql conditions Json by Id put operation typically these are written to a http.Request
*/
type V2AlertsNrqlConditionsJSONByIDPutParams struct {

	/*ConditionID
	  Alerts condition ID to update

	*/
	ConditionID int64
	/*NrqlCondition
	  Condition schema

	*/
	NrqlCondition *models.NrqlCondition

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v2 alerts nrql conditions Json by Id put params
func (o *V2AlertsNrqlConditionsJSONByIDPutParams) WithTimeout(timeout time.Duration) *V2AlertsNrqlConditionsJSONByIDPutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v2 alerts nrql conditions Json by Id put params
func (o *V2AlertsNrqlConditionsJSONByIDPutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v2 alerts nrql conditions Json by Id put params
func (o *V2AlertsNrqlConditionsJSONByIDPutParams) WithContext(ctx context.Context) *V2AlertsNrqlConditionsJSONByIDPutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v2 alerts nrql conditions Json by Id put params
func (o *V2AlertsNrqlConditionsJSONByIDPutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v2 alerts nrql conditions Json by Id put params
func (o *V2AlertsNrqlConditionsJSONByIDPutParams) WithHTTPClient(client *http.Client) *V2AlertsNrqlConditionsJSONByIDPutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v2 alerts nrql conditions Json by Id put params
func (o *V2AlertsNrqlConditionsJSONByIDPutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConditionID adds the conditionID to the v2 alerts nrql conditions Json by Id put params
func (o *V2AlertsNrqlConditionsJSONByIDPutParams) WithConditionID(conditionID int64) *V2AlertsNrqlConditionsJSONByIDPutParams {
	o.SetConditionID(conditionID)
	return o
}

// SetConditionID adds the conditionId to the v2 alerts nrql conditions Json by Id put params
func (o *V2AlertsNrqlConditionsJSONByIDPutParams) SetConditionID(conditionID int64) {
	o.ConditionID = conditionID
}

// WithNrqlCondition adds the nrqlCondition to the v2 alerts nrql conditions Json by Id put params
func (o *V2AlertsNrqlConditionsJSONByIDPutParams) WithNrqlCondition(nrqlCondition *models.NrqlCondition) *V2AlertsNrqlConditionsJSONByIDPutParams {
	o.SetNrqlCondition(nrqlCondition)
	return o
}

// SetNrqlCondition adds the nrqlCondition to the v2 alerts nrql conditions Json by Id put params
func (o *V2AlertsNrqlConditionsJSONByIDPutParams) SetNrqlCondition(nrqlCondition *models.NrqlCondition) {
	o.NrqlCondition = nrqlCondition
}

// WriteToRequest writes these params to a swagger request
func (o *V2AlertsNrqlConditionsJSONByIDPutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param condition_id
	if err := r.SetPathParam("condition_id", swag.FormatInt64(o.ConditionID)); err != nil {
		return err
	}

	if o.NrqlCondition != nil {
		if err := r.SetBodyParam(o.NrqlCondition); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
