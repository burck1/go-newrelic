// Code generated by go-swagger; DO NOT EDIT.

package alerts_nrql_conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new alerts nrql conditions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for alerts nrql conditions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
V2AlertsNrqlConditionsJSONByConditionIDDelete deletes

Delete
*/
func (a *Client) V2AlertsNrqlConditionsJSONByConditionIDDelete(params *V2AlertsNrqlConditionsJSONByConditionIDDeleteParams) (*V2AlertsNrqlConditionsJSONByConditionIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsNrqlConditionsJSONByConditionIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsNrqlConditionsJsonByConditionIdDelete",
		Method:             "DELETE",
		PathPattern:        "/v2/alerts_nrql_conditions/{condition_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsNrqlConditionsJSONByConditionIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsNrqlConditionsJSONByConditionIDDeleteOK), nil

}

/*
V2AlertsNrqlConditionsJSONByIDPut updates

Update
*/
func (a *Client) V2AlertsNrqlConditionsJSONByIDPut(params *V2AlertsNrqlConditionsJSONByIDPutParams) (*V2AlertsNrqlConditionsJSONByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsNrqlConditionsJSONByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsNrqlConditionsJsonByIdPut",
		Method:             "PUT",
		PathPattern:        "/v2/alerts_nrql_conditions/{condition_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsNrqlConditionsJSONByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsNrqlConditionsJSONByIDPutOK), nil

}

/*
V2AlertsNrqlConditionsJSONGet lists

List
*/
func (a *Client) V2AlertsNrqlConditionsJSONGet(params *V2AlertsNrqlConditionsJSONGetParams) (*V2AlertsNrqlConditionsJSONGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsNrqlConditionsJSONGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsNrqlConditionsJsonGet",
		Method:             "GET",
		PathPattern:        "/v2/alerts_nrql_conditions.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsNrqlConditionsJSONGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsNrqlConditionsJSONGetOK), nil

}

/*
V2AlertsNrqlConditionsPoliciesJSONByPolicyIDPost creates

Create
*/
func (a *Client) V2AlertsNrqlConditionsPoliciesJSONByPolicyIDPost(params *V2AlertsNrqlConditionsPoliciesJSONByPolicyIDPostParams) (*V2AlertsNrqlConditionsPoliciesJSONByPolicyIDPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsNrqlConditionsPoliciesJSONByPolicyIDPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsNrqlConditionsPoliciesJsonByPolicyIdPost",
		Method:             "POST",
		PathPattern:        "/v2/alerts_nrql_conditions/policies/{policy_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsNrqlConditionsPoliciesJSONByPolicyIDPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsNrqlConditionsPoliciesJSONByPolicyIDPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
