// Code generated by go-swagger; DO NOT EDIT.

package alerts_synthetics_conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/burck1/go-newrelic/models"
)

// V2AlertsSyntheticsConditionsJSONByConditionIDDeleteReader is a Reader for the V2AlertsSyntheticsConditionsJSONByConditionIDDelete structure.
type V2AlertsSyntheticsConditionsJSONByConditionIDDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteOK creates a V2AlertsSyntheticsConditionsJSONByConditionIDDeleteOK with default headers values
func NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteOK() *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteOK {
	return &V2AlertsSyntheticsConditionsJSONByConditionIDDeleteOK{}
}

/*V2AlertsSyntheticsConditionsJSONByConditionIDDeleteOK handles this case with default header values.

OK
*/
type V2AlertsSyntheticsConditionsJSONByConditionIDDeleteOK struct {
	Payload *models.SyntheticsConditionResponse
}

func (o *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /v2/alerts_synthetics_conditions/{condition_id}.json][%d] v2AlertsSyntheticsConditionsJsonByConditionIdDeleteOK  %+v", 200, o.Payload)
}

func (o *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SyntheticsConditionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteUnauthorized creates a V2AlertsSyntheticsConditionsJSONByConditionIDDeleteUnauthorized with default headers values
func NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteUnauthorized() *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteUnauthorized {
	return &V2AlertsSyntheticsConditionsJSONByConditionIDDeleteUnauthorized{}
}

/*V2AlertsSyntheticsConditionsJSONByConditionIDDeleteUnauthorized handles this case with default header values.

Invalid API key
*/
type V2AlertsSyntheticsConditionsJSONByConditionIDDeleteUnauthorized struct {
	Payload interface{}
}

func (o *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v2/alerts_synthetics_conditions/{condition_id}.json][%d] v2AlertsSyntheticsConditionsJsonByConditionIdDeleteUnauthorized  %+v", 401, o.Payload)
}

func (o *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteForbidden creates a V2AlertsSyntheticsConditionsJSONByConditionIDDeleteForbidden with default headers values
func NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteForbidden() *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteForbidden {
	return &V2AlertsSyntheticsConditionsJSONByConditionIDDeleteForbidden{}
}

/*V2AlertsSyntheticsConditionsJSONByConditionIDDeleteForbidden handles this case with default header values.

New Relic API access has not been enabled
*/
type V2AlertsSyntheticsConditionsJSONByConditionIDDeleteForbidden struct {
	Payload interface{}
}

func (o *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v2/alerts_synthetics_conditions/{condition_id}.json][%d] v2AlertsSyntheticsConditionsJsonByConditionIdDeleteForbidden  %+v", 403, o.Payload)
}

func (o *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteNotFound creates a V2AlertsSyntheticsConditionsJSONByConditionIDDeleteNotFound with default headers values
func NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteNotFound() *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteNotFound {
	return &V2AlertsSyntheticsConditionsJSONByConditionIDDeleteNotFound{}
}

/*V2AlertsSyntheticsConditionsJSONByConditionIDDeleteNotFound handles this case with default header values.

No Alerts condition was found with the given ID
*/
type V2AlertsSyntheticsConditionsJSONByConditionIDDeleteNotFound struct {
	Payload interface{}
}

func (o *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v2/alerts_synthetics_conditions/{condition_id}.json][%d] v2AlertsSyntheticsConditionsJsonByConditionIdDeleteNotFound  %+v", 404, o.Payload)
}

func (o *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteDefault creates a V2AlertsSyntheticsConditionsJSONByConditionIDDeleteDefault with default headers values
func NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteDefault(code int) *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteDefault {
	return &V2AlertsSyntheticsConditionsJSONByConditionIDDeleteDefault{
		_statusCode: code,
	}
}

/*V2AlertsSyntheticsConditionsJSONByConditionIDDeleteDefault handles this case with default header values.

A server error occurred, please contact <a href="http://support.newrelic.com">New Relic support</a>
*/
type V2AlertsSyntheticsConditionsJSONByConditionIDDeleteDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the v2 alerts synthetics conditions Json by condition Id delete default response
func (o *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteDefault) Code() int {
	return o._statusCode
}

func (o *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteDefault) Error() string {
	return fmt.Sprintf("[DELETE /v2/alerts_synthetics_conditions/{condition_id}.json][%d] V2AlertsSyntheticsConditionsJsonByConditionIdDelete default  %+v", o._statusCode, o.Payload)
}

func (o *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
