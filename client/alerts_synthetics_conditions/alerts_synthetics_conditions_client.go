// Code generated by go-swagger; DO NOT EDIT.

package alerts_synthetics_conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new alerts synthetics conditions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for alerts synthetics conditions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
V2AlertsSyntheticsConditionsJSONByConditionIDDelete deletes

Delete
*/
func (a *Client) V2AlertsSyntheticsConditionsJSONByConditionIDDelete(params *V2AlertsSyntheticsConditionsJSONByConditionIDDeleteParams) (*V2AlertsSyntheticsConditionsJSONByConditionIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsSyntheticsConditionsJSONByConditionIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsSyntheticsConditionsJsonByConditionIdDelete",
		Method:             "DELETE",
		PathPattern:        "/v2/alerts_synthetics_conditions/{condition_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsSyntheticsConditionsJSONByConditionIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsSyntheticsConditionsJSONByConditionIDDeleteOK), nil

}

/*
V2AlertsSyntheticsConditionsJSONByIDPut updates

Update
*/
func (a *Client) V2AlertsSyntheticsConditionsJSONByIDPut(params *V2AlertsSyntheticsConditionsJSONByIDPutParams) (*V2AlertsSyntheticsConditionsJSONByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsSyntheticsConditionsJSONByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsSyntheticsConditionsJsonByIdPut",
		Method:             "PUT",
		PathPattern:        "/v2/alerts_synthetics_conditions/{condition_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsSyntheticsConditionsJSONByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsSyntheticsConditionsJSONByIDPutOK), nil

}

/*
V2AlertsSyntheticsConditionsJSONGet lists

List
*/
func (a *Client) V2AlertsSyntheticsConditionsJSONGet(params *V2AlertsSyntheticsConditionsJSONGetParams) (*V2AlertsSyntheticsConditionsJSONGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsSyntheticsConditionsJSONGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsSyntheticsConditionsJsonGet",
		Method:             "GET",
		PathPattern:        "/v2/alerts_synthetics_conditions.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsSyntheticsConditionsJSONGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsSyntheticsConditionsJSONGetOK), nil

}

/*
V2AlertsSyntheticsConditionsPoliciesJSONByPolicyIDPost creates

Create
*/
func (a *Client) V2AlertsSyntheticsConditionsPoliciesJSONByPolicyIDPost(params *V2AlertsSyntheticsConditionsPoliciesJSONByPolicyIDPostParams) (*V2AlertsSyntheticsConditionsPoliciesJSONByPolicyIDPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsSyntheticsConditionsPoliciesJSONByPolicyIDPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsSyntheticsConditionsPoliciesJsonByPolicyIdPost",
		Method:             "POST",
		PathPattern:        "/v2/alerts_synthetics_conditions/policies/{policy_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsSyntheticsConditionsPoliciesJSONByPolicyIDPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsSyntheticsConditionsPoliciesJSONByPolicyIDPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
