// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/burck1/go-newrelic/client/alerts_channels"
	"github.com/burck1/go-newrelic/client/alerts_conditions"
	"github.com/burck1/go-newrelic/client/alerts_entity_conditions"
	"github.com/burck1/go-newrelic/client/alerts_events"
	"github.com/burck1/go-newrelic/client/alerts_external_service_conditions"
	"github.com/burck1/go-newrelic/client/alerts_incidents"
	"github.com/burck1/go-newrelic/client/alerts_nrql_conditions"
	"github.com/burck1/go-newrelic/client/alerts_plugins_conditions"
	"github.com/burck1/go-newrelic/client/alerts_policies"
	"github.com/burck1/go-newrelic/client/alerts_policy_channels"
	"github.com/burck1/go-newrelic/client/alerts_synthetics_conditions"
	"github.com/burck1/go-newrelic/client/alerts_violations"
	"github.com/burck1/go-newrelic/client/application_deployments"
	"github.com/burck1/go-newrelic/client/application_hosts"
	"github.com/burck1/go-newrelic/client/application_instances"
	"github.com/burck1/go-newrelic/client/applications"
	"github.com/burck1/go-newrelic/client/browser_applications"
	"github.com/burck1/go-newrelic/client/components"
	"github.com/burck1/go-newrelic/client/dashboards"
	"github.com/burck1/go-newrelic/client/key_transactions"
	"github.com/burck1/go-newrelic/client/labels"
	"github.com/burck1/go-newrelic/client/mobile_applications"
	"github.com/burck1/go-newrelic/client/plugins"
	"github.com/burck1/go-newrelic/client/servers"
	"github.com/burck1/go-newrelic/client/usages"
	"github.com/burck1/go-newrelic/client/users"
)

// Default new relic v2 r e s t HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "api.newrelic.com"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new new relic v2 r e s t HTTP client.
func NewHTTPClient(formats strfmt.Registry) *NewRelicV2REST {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new new relic v2 r e s t HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *NewRelicV2REST {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new new relic v2 r e s t client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *NewRelicV2REST {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(NewRelicV2REST)
	cli.Transport = transport

	cli.AlertsChannels = alerts_channels.New(transport, formats)

	cli.AlertsConditions = alerts_conditions.New(transport, formats)

	cli.AlertsEntityConditions = alerts_entity_conditions.New(transport, formats)

	cli.AlertsEvents = alerts_events.New(transport, formats)

	cli.AlertsExternalServiceConditions = alerts_external_service_conditions.New(transport, formats)

	cli.AlertsIncidents = alerts_incidents.New(transport, formats)

	cli.AlertsNrqlConditions = alerts_nrql_conditions.New(transport, formats)

	cli.AlertsPluginsConditions = alerts_plugins_conditions.New(transport, formats)

	cli.AlertsPolicies = alerts_policies.New(transport, formats)

	cli.AlertsPolicyChannels = alerts_policy_channels.New(transport, formats)

	cli.AlertsSyntheticsConditions = alerts_synthetics_conditions.New(transport, formats)

	cli.AlertsViolations = alerts_violations.New(transport, formats)

	cli.ApplicationDeployments = application_deployments.New(transport, formats)

	cli.ApplicationHosts = application_hosts.New(transport, formats)

	cli.ApplicationInstances = application_instances.New(transport, formats)

	cli.Applications = applications.New(transport, formats)

	cli.BrowserApplications = browser_applications.New(transport, formats)

	cli.Components = components.New(transport, formats)

	cli.Dashboards = dashboards.New(transport, formats)

	cli.KeyTransactions = key_transactions.New(transport, formats)

	cli.Labels = labels.New(transport, formats)

	cli.MobileApplications = mobile_applications.New(transport, formats)

	cli.Plugins = plugins.New(transport, formats)

	cli.Servers = servers.New(transport, formats)

	cli.Usages = usages.New(transport, formats)

	cli.Users = users.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// NewRelicV2REST is a client for new relic v2 r e s t
type NewRelicV2REST struct {
	AlertsChannels *alerts_channels.Client

	AlertsConditions *alerts_conditions.Client

	AlertsEntityConditions *alerts_entity_conditions.Client

	AlertsEvents *alerts_events.Client

	AlertsExternalServiceConditions *alerts_external_service_conditions.Client

	AlertsIncidents *alerts_incidents.Client

	AlertsNrqlConditions *alerts_nrql_conditions.Client

	AlertsPluginsConditions *alerts_plugins_conditions.Client

	AlertsPolicies *alerts_policies.Client

	AlertsPolicyChannels *alerts_policy_channels.Client

	AlertsSyntheticsConditions *alerts_synthetics_conditions.Client

	AlertsViolations *alerts_violations.Client

	ApplicationDeployments *application_deployments.Client

	ApplicationHosts *application_hosts.Client

	ApplicationInstances *application_instances.Client

	Applications *applications.Client

	BrowserApplications *browser_applications.Client

	Components *components.Client

	Dashboards *dashboards.Client

	KeyTransactions *key_transactions.Client

	Labels *labels.Client

	MobileApplications *mobile_applications.Client

	Plugins *plugins.Client

	Servers *servers.Client

	Usages *usages.Client

	Users *users.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *NewRelicV2REST) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.AlertsChannels.SetTransport(transport)

	c.AlertsConditions.SetTransport(transport)

	c.AlertsEntityConditions.SetTransport(transport)

	c.AlertsEvents.SetTransport(transport)

	c.AlertsExternalServiceConditions.SetTransport(transport)

	c.AlertsIncidents.SetTransport(transport)

	c.AlertsNrqlConditions.SetTransport(transport)

	c.AlertsPluginsConditions.SetTransport(transport)

	c.AlertsPolicies.SetTransport(transport)

	c.AlertsPolicyChannels.SetTransport(transport)

	c.AlertsSyntheticsConditions.SetTransport(transport)

	c.AlertsViolations.SetTransport(transport)

	c.ApplicationDeployments.SetTransport(transport)

	c.ApplicationHosts.SetTransport(transport)

	c.ApplicationInstances.SetTransport(transport)

	c.Applications.SetTransport(transport)

	c.BrowserApplications.SetTransport(transport)

	c.Components.SetTransport(transport)

	c.Dashboards.SetTransport(transport)

	c.KeyTransactions.SetTransport(transport)

	c.Labels.SetTransport(transport)

	c.MobileApplications.SetTransport(transport)

	c.Plugins.SetTransport(transport)

	c.Servers.SetTransport(transport)

	c.Usages.SetTransport(transport)

	c.Users.SetTransport(transport)

}
