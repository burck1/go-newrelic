// Code generated by go-swagger; DO NOT EDIT.

package components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new components API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for components API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
V2ComponentsJSONByIDGet shows

Show
*/
func (a *Client) V2ComponentsJSONByIDGet(params *V2ComponentsJSONByIDGetParams) (*V2ComponentsJSONByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ComponentsJSONByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ComponentsJsonByIdGet",
		Method:             "GET",
		PathPattern:        "/v2/components/{component_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ComponentsJSONByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ComponentsJSONByIDGetOK), nil

}

/*
V2ComponentsJSONGet lists

List
*/
func (a *Client) V2ComponentsJSONGet(params *V2ComponentsJSONGetParams) (*V2ComponentsJSONGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ComponentsJSONGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ComponentsJsonGet",
		Method:             "GET",
		PathPattern:        "/v2/components.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ComponentsJSONGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ComponentsJSONGetOK), nil

}

/*
V2ComponentsMetricsDataJSONByComponentIDGet data

Metric Data
*/
func (a *Client) V2ComponentsMetricsDataJSONByComponentIDGet(params *V2ComponentsMetricsDataJSONByComponentIDGetParams) (*V2ComponentsMetricsDataJSONByComponentIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ComponentsMetricsDataJSONByComponentIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ComponentsMetricsDataJsonByComponentIdGet",
		Method:             "GET",
		PathPattern:        "/v2/components/{component_id}/metrics/data.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ComponentsMetricsDataJSONByComponentIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ComponentsMetricsDataJSONByComponentIDGetOK), nil

}

/*
V2ComponentsMetricsJSONByComponentIDGet names

Metric Names
*/
func (a *Client) V2ComponentsMetricsJSONByComponentIDGet(params *V2ComponentsMetricsJSONByComponentIDGetParams) (*V2ComponentsMetricsJSONByComponentIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ComponentsMetricsJSONByComponentIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ComponentsMetricsJsonByComponentIdGet",
		Method:             "GET",
		PathPattern:        "/v2/components/{component_id}/metrics.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ComponentsMetricsJSONByComponentIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ComponentsMetricsJSONByComponentIDGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
