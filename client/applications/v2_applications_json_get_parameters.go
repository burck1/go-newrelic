// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewV2ApplicationsJSONGetParams creates a new V2ApplicationsJSONGetParams object
// with the default values initialized.
func NewV2ApplicationsJSONGetParams() *V2ApplicationsJSONGetParams {
	var ()
	return &V2ApplicationsJSONGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV2ApplicationsJSONGetParamsWithTimeout creates a new V2ApplicationsJSONGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV2ApplicationsJSONGetParamsWithTimeout(timeout time.Duration) *V2ApplicationsJSONGetParams {
	var ()
	return &V2ApplicationsJSONGetParams{

		timeout: timeout,
	}
}

// NewV2ApplicationsJSONGetParamsWithContext creates a new V2ApplicationsJSONGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewV2ApplicationsJSONGetParamsWithContext(ctx context.Context) *V2ApplicationsJSONGetParams {
	var ()
	return &V2ApplicationsJSONGetParams{

		Context: ctx,
	}
}

// NewV2ApplicationsJSONGetParamsWithHTTPClient creates a new V2ApplicationsJSONGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV2ApplicationsJSONGetParamsWithHTTPClient(client *http.Client) *V2ApplicationsJSONGetParams {
	var ()
	return &V2ApplicationsJSONGetParams{
		HTTPClient: client,
	}
}

/*V2ApplicationsJSONGetParams contains all the parameters to send to the API endpoint
for the v2 applications Json get operation typically these are written to a http.Request
*/
type V2ApplicationsJSONGetParams struct {

	/*ExcludeLinks
	  Exclude links section from the response

	*/
	ExcludeLinks *bool
	/*FilterHost
	  Filter by application host

	*/
	FilterHost *string
	/*FilterIds
	  Filter by application ids

	*/
	FilterIds []int64
	/*FilterLanguage
	  Filter by application language

	*/
	FilterLanguage *string
	/*FilterName
	  Filter by application name

	*/
	FilterName *string
	/*Page
	  Pagination index

	*/
	Page *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) WithTimeout(timeout time.Duration) *V2ApplicationsJSONGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) WithContext(ctx context.Context) *V2ApplicationsJSONGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) WithHTTPClient(client *http.Client) *V2ApplicationsJSONGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExcludeLinks adds the excludeLinks to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) WithExcludeLinks(excludeLinks *bool) *V2ApplicationsJSONGetParams {
	o.SetExcludeLinks(excludeLinks)
	return o
}

// SetExcludeLinks adds the excludeLinks to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) SetExcludeLinks(excludeLinks *bool) {
	o.ExcludeLinks = excludeLinks
}

// WithFilterHost adds the filterHost to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) WithFilterHost(filterHost *string) *V2ApplicationsJSONGetParams {
	o.SetFilterHost(filterHost)
	return o
}

// SetFilterHost adds the filterHost to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) SetFilterHost(filterHost *string) {
	o.FilterHost = filterHost
}

// WithFilterIds adds the filterIds to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) WithFilterIds(filterIds []int64) *V2ApplicationsJSONGetParams {
	o.SetFilterIds(filterIds)
	return o
}

// SetFilterIds adds the filterIds to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) SetFilterIds(filterIds []int64) {
	o.FilterIds = filterIds
}

// WithFilterLanguage adds the filterLanguage to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) WithFilterLanguage(filterLanguage *string) *V2ApplicationsJSONGetParams {
	o.SetFilterLanguage(filterLanguage)
	return o
}

// SetFilterLanguage adds the filterLanguage to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) SetFilterLanguage(filterLanguage *string) {
	o.FilterLanguage = filterLanguage
}

// WithFilterName adds the filterName to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) WithFilterName(filterName *string) *V2ApplicationsJSONGetParams {
	o.SetFilterName(filterName)
	return o
}

// SetFilterName adds the filterName to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) SetFilterName(filterName *string) {
	o.FilterName = filterName
}

// WithPage adds the page to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) WithPage(page *int64) *V2ApplicationsJSONGetParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the v2 applications Json get params
func (o *V2ApplicationsJSONGetParams) SetPage(page *int64) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *V2ApplicationsJSONGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ExcludeLinks != nil {

		// query param exclude_links
		var qrExcludeLinks bool
		if o.ExcludeLinks != nil {
			qrExcludeLinks = *o.ExcludeLinks
		}
		qExcludeLinks := swag.FormatBool(qrExcludeLinks)
		if qExcludeLinks != "" {
			if err := r.SetQueryParam("exclude_links", qExcludeLinks); err != nil {
				return err
			}
		}

	}

	if o.FilterHost != nil {

		// query param filter[host]
		var qrFilterHost string
		if o.FilterHost != nil {
			qrFilterHost = *o.FilterHost
		}
		qFilterHost := qrFilterHost
		if qFilterHost != "" {
			if err := r.SetQueryParam("filter[host]", qFilterHost); err != nil {
				return err
			}
		}

	}

	var valuesFilterIds []string
	for _, v := range o.FilterIds {
		valuesFilterIds = append(valuesFilterIds, swag.FormatInt64(v))
	}

	joinedFilterIds := swag.JoinByFormat(valuesFilterIds, "csv")
	// query array param filter[ids]
	if err := r.SetQueryParam("filter[ids]", joinedFilterIds...); err != nil {
		return err
	}

	if o.FilterLanguage != nil {

		// query param filter[language]
		var qrFilterLanguage string
		if o.FilterLanguage != nil {
			qrFilterLanguage = *o.FilterLanguage
		}
		qFilterLanguage := qrFilterLanguage
		if qFilterLanguage != "" {
			if err := r.SetQueryParam("filter[language]", qFilterLanguage); err != nil {
				return err
			}
		}

	}

	if o.FilterName != nil {

		// query param filter[name]
		var qrFilterName string
		if o.FilterName != nil {
			qrFilterName = *o.FilterName
		}
		qFilterName := qrFilterName
		if qFilterName != "" {
			if err := r.SetQueryParam("filter[name]", qFilterName); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
