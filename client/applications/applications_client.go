// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new applications API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for applications API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
V2ApplicationsJSONByIDDelete deletes

Delete
*/
func (a *Client) V2ApplicationsJSONByIDDelete(params *V2ApplicationsJSONByIDDeleteParams) (*V2ApplicationsJSONByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsJSONByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsJsonByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/v2/applications/{application_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsJSONByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsJSONByIDDeleteOK), nil

}

/*
V2ApplicationsJSONByIDGet shows

Show
*/
func (a *Client) V2ApplicationsJSONByIDGet(params *V2ApplicationsJSONByIDGetParams) (*V2ApplicationsJSONByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsJSONByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsJsonByIdGet",
		Method:             "GET",
		PathPattern:        "/v2/applications/{application_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsJSONByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsJSONByIDGetOK), nil

}

/*
V2ApplicationsJSONByIDPut updates

Update
*/
func (a *Client) V2ApplicationsJSONByIDPut(params *V2ApplicationsJSONByIDPutParams) (*V2ApplicationsJSONByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsJSONByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsJsonByIdPut",
		Method:             "PUT",
		PathPattern:        "/v2/applications/{application_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsJSONByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsJSONByIDPutOK), nil

}

/*
V2ApplicationsJSONGet lists

List
*/
func (a *Client) V2ApplicationsJSONGet(params *V2ApplicationsJSONGetParams) (*V2ApplicationsJSONGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsJSONGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsJsonGet",
		Method:             "GET",
		PathPattern:        "/v2/applications.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsJSONGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsJSONGetOK), nil

}

/*
V2ApplicationsMetricsDataJSONByApplicationIDGet metrics data

Metric Data
*/
func (a *Client) V2ApplicationsMetricsDataJSONByApplicationIDGet(params *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) (*V2ApplicationsMetricsDataJSONByApplicationIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsMetricsDataJSONByApplicationIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsMetricsDataJsonByApplicationIdGet",
		Method:             "GET",
		PathPattern:        "/v2/applications/{application_id}/metrics/data.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsMetricsDataJSONByApplicationIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsMetricsDataJSONByApplicationIDGetOK), nil

}

/*
V2ApplicationsMetricsJSONByApplicationIDGet metrics names

Metric Names
*/
func (a *Client) V2ApplicationsMetricsJSONByApplicationIDGet(params *V2ApplicationsMetricsJSONByApplicationIDGetParams) (*V2ApplicationsMetricsJSONByApplicationIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsMetricsJSONByApplicationIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsMetricsJsonByApplicationIdGet",
		Method:             "GET",
		PathPattern:        "/v2/applications/{application_id}/metrics.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsMetricsJSONByApplicationIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsMetricsJSONByApplicationIDGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
