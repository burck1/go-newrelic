// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewV2ApplicationsMetricsDataJSONByApplicationIDGetParams creates a new V2ApplicationsMetricsDataJSONByApplicationIDGetParams object
// with the default values initialized.
func NewV2ApplicationsMetricsDataJSONByApplicationIDGetParams() *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	var ()
	return &V2ApplicationsMetricsDataJSONByApplicationIDGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV2ApplicationsMetricsDataJSONByApplicationIDGetParamsWithTimeout creates a new V2ApplicationsMetricsDataJSONByApplicationIDGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV2ApplicationsMetricsDataJSONByApplicationIDGetParamsWithTimeout(timeout time.Duration) *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	var ()
	return &V2ApplicationsMetricsDataJSONByApplicationIDGetParams{

		timeout: timeout,
	}
}

// NewV2ApplicationsMetricsDataJSONByApplicationIDGetParamsWithContext creates a new V2ApplicationsMetricsDataJSONByApplicationIDGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewV2ApplicationsMetricsDataJSONByApplicationIDGetParamsWithContext(ctx context.Context) *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	var ()
	return &V2ApplicationsMetricsDataJSONByApplicationIDGetParams{

		Context: ctx,
	}
}

// NewV2ApplicationsMetricsDataJSONByApplicationIDGetParamsWithHTTPClient creates a new V2ApplicationsMetricsDataJSONByApplicationIDGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV2ApplicationsMetricsDataJSONByApplicationIDGetParamsWithHTTPClient(client *http.Client) *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	var ()
	return &V2ApplicationsMetricsDataJSONByApplicationIDGetParams{
		HTTPClient: client,
	}
}

/*V2ApplicationsMetricsDataJSONByApplicationIDGetParams contains all the parameters to send to the API endpoint
for the v2 applications metrics data Json by application Id get operation typically these are written to a http.Request
*/
type V2ApplicationsMetricsDataJSONByApplicationIDGetParams struct {

	/*ApplicationID
	  Application ID

	*/
	ApplicationID int64
	/*From
	  Retrieve metrics after this time

	*/
	From *strfmt.DateTime
	/*Names
	  Retrieve specific metrics by name

	*/
	Names []string
	/*Period
	  Period of timeslices in seconds

	*/
	Period *int64
	/*Raw
	  Return unformatted raw values

	*/
	Raw *bool
	/*Summarize
	  Summarize the data

	*/
	Summarize *bool
	/*To
	  Retrieve metrics before this time

	*/
	To *strfmt.DateTime
	/*Values
	  Retrieve specific metric values

	*/
	Values []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) WithTimeout(timeout time.Duration) *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) WithContext(ctx context.Context) *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) WithHTTPClient(client *http.Client) *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationID adds the applicationID to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) WithApplicationID(applicationID int64) *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) SetApplicationID(applicationID int64) {
	o.ApplicationID = applicationID
}

// WithFrom adds the from to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) WithFrom(from *strfmt.DateTime) *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) SetFrom(from *strfmt.DateTime) {
	o.From = from
}

// WithNames adds the names to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) WithNames(names []string) *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	o.SetNames(names)
	return o
}

// SetNames adds the names to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) SetNames(names []string) {
	o.Names = names
}

// WithPeriod adds the period to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) WithPeriod(period *int64) *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	o.SetPeriod(period)
	return o
}

// SetPeriod adds the period to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) SetPeriod(period *int64) {
	o.Period = period
}

// WithRaw adds the raw to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) WithRaw(raw *bool) *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	o.SetRaw(raw)
	return o
}

// SetRaw adds the raw to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) SetRaw(raw *bool) {
	o.Raw = raw
}

// WithSummarize adds the summarize to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) WithSummarize(summarize *bool) *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	o.SetSummarize(summarize)
	return o
}

// SetSummarize adds the summarize to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) SetSummarize(summarize *bool) {
	o.Summarize = summarize
}

// WithTo adds the to to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) WithTo(to *strfmt.DateTime) *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) SetTo(to *strfmt.DateTime) {
	o.To = to
}

// WithValues adds the values to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) WithValues(values []string) *V2ApplicationsMetricsDataJSONByApplicationIDGetParams {
	o.SetValues(values)
	return o
}

// SetValues adds the values to the v2 applications metrics data Json by application Id get params
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) SetValues(values []string) {
	o.Values = values
}

// WriteToRequest writes these params to a swagger request
func (o *V2ApplicationsMetricsDataJSONByApplicationIDGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param application_id
	if err := r.SetPathParam("application_id", swag.FormatInt64(o.ApplicationID)); err != nil {
		return err
	}

	if o.From != nil {

		// query param from
		var qrFrom strfmt.DateTime
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom.String()
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	valuesNames := o.Names

	joinedNames := swag.JoinByFormat(valuesNames, "csv")
	// query array param names
	if err := r.SetQueryParam("names", joinedNames...); err != nil {
		return err
	}

	if o.Period != nil {

		// query param period
		var qrPeriod int64
		if o.Period != nil {
			qrPeriod = *o.Period
		}
		qPeriod := swag.FormatInt64(qrPeriod)
		if qPeriod != "" {
			if err := r.SetQueryParam("period", qPeriod); err != nil {
				return err
			}
		}

	}

	if o.Raw != nil {

		// query param raw
		var qrRaw bool
		if o.Raw != nil {
			qrRaw = *o.Raw
		}
		qRaw := swag.FormatBool(qrRaw)
		if qRaw != "" {
			if err := r.SetQueryParam("raw", qRaw); err != nil {
				return err
			}
		}

	}

	if o.Summarize != nil {

		// query param summarize
		var qrSummarize bool
		if o.Summarize != nil {
			qrSummarize = *o.Summarize
		}
		qSummarize := swag.FormatBool(qrSummarize)
		if qSummarize != "" {
			if err := r.SetQueryParam("summarize", qSummarize); err != nil {
				return err
			}
		}

	}

	if o.To != nil {

		// query param to
		var qrTo strfmt.DateTime
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo.String()
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	valuesValues := o.Values

	joinedValues := swag.JoinByFormat(valuesValues, "csv")
	// query array param values
	if err := r.SetQueryParam("values", joinedValues...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
