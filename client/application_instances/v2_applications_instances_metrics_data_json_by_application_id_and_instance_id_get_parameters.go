// Code generated by go-swagger; DO NOT EDIT.

package application_instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewV2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams creates a new V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams object
// with the default values initialized.
func NewV2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams() *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	var ()
	return &V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParamsWithTimeout creates a new V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParamsWithTimeout(timeout time.Duration) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	var ()
	return &V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams{

		timeout: timeout,
	}
}

// NewV2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParamsWithContext creates a new V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewV2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParamsWithContext(ctx context.Context) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	var ()
	return &V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams{

		Context: ctx,
	}
}

// NewV2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParamsWithHTTPClient creates a new V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParamsWithHTTPClient(client *http.Client) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	var ()
	return &V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams{
		HTTPClient: client,
	}
}

/*V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams contains all the parameters to send to the API endpoint
for the v2 applications instances metrics data Json by application Id and instance Id get operation typically these are written to a http.Request
*/
type V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams struct {

	/*ApplicationID
	  Application ID

	*/
	ApplicationID int64
	/*From
	  Retrieve metrics after this time

	*/
	From *strfmt.DateTime
	/*InstanceID
	  Application Instance ID

	*/
	InstanceID int64
	/*Names
	  Retrieve specific metrics by name

	*/
	Names []string
	/*Period
	  Period of timeslices in seconds

	*/
	Period *int64
	/*Raw
	  Return unformatted raw values

	*/
	Raw *bool
	/*Summarize
	  Summarize the data

	*/
	Summarize *bool
	/*To
	  Retrieve metrics before this time

	*/
	To *strfmt.DateTime
	/*Values
	  Retrieve specific metric values

	*/
	Values []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) WithTimeout(timeout time.Duration) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) WithContext(ctx context.Context) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) WithHTTPClient(client *http.Client) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationID adds the applicationID to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) WithApplicationID(applicationID int64) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) SetApplicationID(applicationID int64) {
	o.ApplicationID = applicationID
}

// WithFrom adds the from to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) WithFrom(from *strfmt.DateTime) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) SetFrom(from *strfmt.DateTime) {
	o.From = from
}

// WithInstanceID adds the instanceID to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) WithInstanceID(instanceID int64) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	o.SetInstanceID(instanceID)
	return o
}

// SetInstanceID adds the instanceId to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) SetInstanceID(instanceID int64) {
	o.InstanceID = instanceID
}

// WithNames adds the names to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) WithNames(names []string) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	o.SetNames(names)
	return o
}

// SetNames adds the names to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) SetNames(names []string) {
	o.Names = names
}

// WithPeriod adds the period to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) WithPeriod(period *int64) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	o.SetPeriod(period)
	return o
}

// SetPeriod adds the period to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) SetPeriod(period *int64) {
	o.Period = period
}

// WithRaw adds the raw to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) WithRaw(raw *bool) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	o.SetRaw(raw)
	return o
}

// SetRaw adds the raw to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) SetRaw(raw *bool) {
	o.Raw = raw
}

// WithSummarize adds the summarize to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) WithSummarize(summarize *bool) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	o.SetSummarize(summarize)
	return o
}

// SetSummarize adds the summarize to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) SetSummarize(summarize *bool) {
	o.Summarize = summarize
}

// WithTo adds the to to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) WithTo(to *strfmt.DateTime) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) SetTo(to *strfmt.DateTime) {
	o.To = to
}

// WithValues adds the values to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) WithValues(values []string) *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams {
	o.SetValues(values)
	return o
}

// SetValues adds the values to the v2 applications instances metrics data Json by application Id and instance Id get params
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) SetValues(values []string) {
	o.Values = values
}

// WriteToRequest writes these params to a swagger request
func (o *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param application_id
	if err := r.SetPathParam("application_id", swag.FormatInt64(o.ApplicationID)); err != nil {
		return err
	}

	if o.From != nil {

		// query param from
		var qrFrom strfmt.DateTime
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom.String()
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	// path param instance_id
	if err := r.SetPathParam("instance_id", swag.FormatInt64(o.InstanceID)); err != nil {
		return err
	}

	valuesNames := o.Names

	joinedNames := swag.JoinByFormat(valuesNames, "csv")
	// query array param names
	if err := r.SetQueryParam("names", joinedNames...); err != nil {
		return err
	}

	if o.Period != nil {

		// query param period
		var qrPeriod int64
		if o.Period != nil {
			qrPeriod = *o.Period
		}
		qPeriod := swag.FormatInt64(qrPeriod)
		if qPeriod != "" {
			if err := r.SetQueryParam("period", qPeriod); err != nil {
				return err
			}
		}

	}

	if o.Raw != nil {

		// query param raw
		var qrRaw bool
		if o.Raw != nil {
			qrRaw = *o.Raw
		}
		qRaw := swag.FormatBool(qrRaw)
		if qRaw != "" {
			if err := r.SetQueryParam("raw", qRaw); err != nil {
				return err
			}
		}

	}

	if o.Summarize != nil {

		// query param summarize
		var qrSummarize bool
		if o.Summarize != nil {
			qrSummarize = *o.Summarize
		}
		qSummarize := swag.FormatBool(qrSummarize)
		if qSummarize != "" {
			if err := r.SetQueryParam("summarize", qSummarize); err != nil {
				return err
			}
		}

	}

	if o.To != nil {

		// query param to
		var qrTo strfmt.DateTime
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo.String()
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	valuesValues := o.Values

	joinedValues := swag.JoinByFormat(valuesValues, "csv")
	// query array param values
	if err := r.SetQueryParam("values", joinedValues...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
