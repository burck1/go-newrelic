// Code generated by go-swagger; DO NOT EDIT.

package application_instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/burck1/go-newrelic/models"
)

// V2ApplicationsInstancesJSONByApplicationIDAndIDGetReader is a Reader for the V2ApplicationsInstancesJSONByApplicationIDAndIDGet structure.
type V2ApplicationsInstancesJSONByApplicationIDAndIDGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V2ApplicationsInstancesJSONByApplicationIDAndIDGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetOK creates a V2ApplicationsInstancesJSONByApplicationIDAndIDGetOK with default headers values
func NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetOK() *V2ApplicationsInstancesJSONByApplicationIDAndIDGetOK {
	return &V2ApplicationsInstancesJSONByApplicationIDAndIDGetOK{}
}

/*V2ApplicationsInstancesJSONByApplicationIDAndIDGetOK handles this case with default header values.

OK
*/
type V2ApplicationsInstancesJSONByApplicationIDAndIDGetOK struct {
	Payload *models.ApplicationInstanceResponse
}

func (o *V2ApplicationsInstancesJSONByApplicationIDAndIDGetOK) Error() string {
	return fmt.Sprintf("[GET /v2/applications/{application_id}/instances/{instance_id}.json][%d] v2ApplicationsInstancesJsonByApplicationIdAndIdGetOK  %+v", 200, o.Payload)
}

func (o *V2ApplicationsInstancesJSONByApplicationIDAndIDGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApplicationInstanceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetUnauthorized creates a V2ApplicationsInstancesJSONByApplicationIDAndIDGetUnauthorized with default headers values
func NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetUnauthorized() *V2ApplicationsInstancesJSONByApplicationIDAndIDGetUnauthorized {
	return &V2ApplicationsInstancesJSONByApplicationIDAndIDGetUnauthorized{}
}

/*V2ApplicationsInstancesJSONByApplicationIDAndIDGetUnauthorized handles this case with default header values.

Invalid API key
*/
type V2ApplicationsInstancesJSONByApplicationIDAndIDGetUnauthorized struct {
	Payload interface{}
}

func (o *V2ApplicationsInstancesJSONByApplicationIDAndIDGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/applications/{application_id}/instances/{instance_id}.json][%d] v2ApplicationsInstancesJsonByApplicationIdAndIdGetUnauthorized  %+v", 401, o.Payload)
}

func (o *V2ApplicationsInstancesJSONByApplicationIDAndIDGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetForbidden creates a V2ApplicationsInstancesJSONByApplicationIDAndIDGetForbidden with default headers values
func NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetForbidden() *V2ApplicationsInstancesJSONByApplicationIDAndIDGetForbidden {
	return &V2ApplicationsInstancesJSONByApplicationIDAndIDGetForbidden{}
}

/*V2ApplicationsInstancesJSONByApplicationIDAndIDGetForbidden handles this case with default header values.

New Relic API access has not been enabled
*/
type V2ApplicationsInstancesJSONByApplicationIDAndIDGetForbidden struct {
	Payload interface{}
}

func (o *V2ApplicationsInstancesJSONByApplicationIDAndIDGetForbidden) Error() string {
	return fmt.Sprintf("[GET /v2/applications/{application_id}/instances/{instance_id}.json][%d] v2ApplicationsInstancesJsonByApplicationIdAndIdGetForbidden  %+v", 403, o.Payload)
}

func (o *V2ApplicationsInstancesJSONByApplicationIDAndIDGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetNotFound creates a V2ApplicationsInstancesJSONByApplicationIDAndIDGetNotFound with default headers values
func NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetNotFound() *V2ApplicationsInstancesJSONByApplicationIDAndIDGetNotFound {
	return &V2ApplicationsInstancesJSONByApplicationIDAndIDGetNotFound{}
}

/*V2ApplicationsInstancesJSONByApplicationIDAndIDGetNotFound handles this case with default header values.

No application instance found with the given ID
*/
type V2ApplicationsInstancesJSONByApplicationIDAndIDGetNotFound struct {
	Payload interface{}
}

func (o *V2ApplicationsInstancesJSONByApplicationIDAndIDGetNotFound) Error() string {
	return fmt.Sprintf("[GET /v2/applications/{application_id}/instances/{instance_id}.json][%d] v2ApplicationsInstancesJsonByApplicationIdAndIdGetNotFound  %+v", 404, o.Payload)
}

func (o *V2ApplicationsInstancesJSONByApplicationIDAndIDGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetDefault creates a V2ApplicationsInstancesJSONByApplicationIDAndIDGetDefault with default headers values
func NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetDefault(code int) *V2ApplicationsInstancesJSONByApplicationIDAndIDGetDefault {
	return &V2ApplicationsInstancesJSONByApplicationIDAndIDGetDefault{
		_statusCode: code,
	}
}

/*V2ApplicationsInstancesJSONByApplicationIDAndIDGetDefault handles this case with default header values.

A server error occurred, please contact <a href="http://support.newrelic.com">New Relic support</a>
*/
type V2ApplicationsInstancesJSONByApplicationIDAndIDGetDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the v2 applications instances Json by application Id and Id get default response
func (o *V2ApplicationsInstancesJSONByApplicationIDAndIDGetDefault) Code() int {
	return o._statusCode
}

func (o *V2ApplicationsInstancesJSONByApplicationIDAndIDGetDefault) Error() string {
	return fmt.Sprintf("[GET /v2/applications/{application_id}/instances/{instance_id}.json][%d] V2ApplicationsInstancesJsonByApplicationIdAndIdGet default  %+v", o._statusCode, o.Payload)
}

func (o *V2ApplicationsInstancesJSONByApplicationIDAndIDGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
