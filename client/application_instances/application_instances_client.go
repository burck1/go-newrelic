// Code generated by go-swagger; DO NOT EDIT.

package application_instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new application instances API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for application instances API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
V2ApplicationsInstancesJSONByApplicationIDAndIDGet shows

Show
*/
func (a *Client) V2ApplicationsInstancesJSONByApplicationIDAndIDGet(params *V2ApplicationsInstancesJSONByApplicationIDAndIDGetParams) (*V2ApplicationsInstancesJSONByApplicationIDAndIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsInstancesJSONByApplicationIDAndIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsInstancesJsonByApplicationIdAndIdGet",
		Method:             "GET",
		PathPattern:        "/v2/applications/{application_id}/instances/{instance_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsInstancesJSONByApplicationIDAndIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsInstancesJSONByApplicationIDAndIDGetOK), nil

}

/*
V2ApplicationsInstancesJSONByApplicationIDGet lists

List
*/
func (a *Client) V2ApplicationsInstancesJSONByApplicationIDGet(params *V2ApplicationsInstancesJSONByApplicationIDGetParams) (*V2ApplicationsInstancesJSONByApplicationIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsInstancesJSONByApplicationIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsInstancesJsonByApplicationIdGet",
		Method:             "GET",
		PathPattern:        "/v2/applications/{application_id}/instances.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsInstancesJSONByApplicationIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsInstancesJSONByApplicationIDGetOK), nil

}

/*
V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGet data

Metric Data
*/
func (a *Client) V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGet(params *V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams) (*V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsInstancesMetricsDataJsonByApplicationIdAndInstanceIdGet",
		Method:             "GET",
		PathPattern:        "/v2/applications/{application_id}/instances/{instance_id}/metrics/data.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsInstancesMetricsDataJSONByApplicationIDAndInstanceIDGetOK), nil

}

/*
V2ApplicationsInstancesMetricsJSONByApplicationIDAndInstanceIDGet names

Metric Names
*/
func (a *Client) V2ApplicationsInstancesMetricsJSONByApplicationIDAndInstanceIDGet(params *V2ApplicationsInstancesMetricsJSONByApplicationIDAndInstanceIDGetParams) (*V2ApplicationsInstancesMetricsJSONByApplicationIDAndInstanceIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsInstancesMetricsJSONByApplicationIDAndInstanceIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsInstancesMetricsJsonByApplicationIdAndInstanceIdGet",
		Method:             "GET",
		PathPattern:        "/v2/applications/{application_id}/instances/{instance_id}/metrics.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsInstancesMetricsJSONByApplicationIDAndInstanceIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsInstancesMetricsJSONByApplicationIDAndInstanceIDGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
