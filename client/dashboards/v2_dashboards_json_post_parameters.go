// Code generated by go-swagger; DO NOT EDIT.

package dashboards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/burck1/go-newrelic/models"
)

// NewV2DashboardsJSONPostParams creates a new V2DashboardsJSONPostParams object
// with the default values initialized.
func NewV2DashboardsJSONPostParams() *V2DashboardsJSONPostParams {
	var ()
	return &V2DashboardsJSONPostParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV2DashboardsJSONPostParamsWithTimeout creates a new V2DashboardsJSONPostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV2DashboardsJSONPostParamsWithTimeout(timeout time.Duration) *V2DashboardsJSONPostParams {
	var ()
	return &V2DashboardsJSONPostParams{

		timeout: timeout,
	}
}

// NewV2DashboardsJSONPostParamsWithContext creates a new V2DashboardsJSONPostParams object
// with the default values initialized, and the ability to set a context for a request
func NewV2DashboardsJSONPostParamsWithContext(ctx context.Context) *V2DashboardsJSONPostParams {
	var ()
	return &V2DashboardsJSONPostParams{

		Context: ctx,
	}
}

// NewV2DashboardsJSONPostParamsWithHTTPClient creates a new V2DashboardsJSONPostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV2DashboardsJSONPostParamsWithHTTPClient(client *http.Client) *V2DashboardsJSONPostParams {
	var ()
	return &V2DashboardsJSONPostParams{
		HTTPClient: client,
	}
}

/*V2DashboardsJSONPostParams contains all the parameters to send to the API endpoint
for the v2 dashboards Json post operation typically these are written to a http.Request
*/
type V2DashboardsJSONPostParams struct {

	/*Dashboard
	  Dashboard schema

	*/
	Dashboard *models.Dashboard

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v2 dashboards Json post params
func (o *V2DashboardsJSONPostParams) WithTimeout(timeout time.Duration) *V2DashboardsJSONPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v2 dashboards Json post params
func (o *V2DashboardsJSONPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v2 dashboards Json post params
func (o *V2DashboardsJSONPostParams) WithContext(ctx context.Context) *V2DashboardsJSONPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v2 dashboards Json post params
func (o *V2DashboardsJSONPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v2 dashboards Json post params
func (o *V2DashboardsJSONPostParams) WithHTTPClient(client *http.Client) *V2DashboardsJSONPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v2 dashboards Json post params
func (o *V2DashboardsJSONPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDashboard adds the dashboard to the v2 dashboards Json post params
func (o *V2DashboardsJSONPostParams) WithDashboard(dashboard *models.Dashboard) *V2DashboardsJSONPostParams {
	o.SetDashboard(dashboard)
	return o
}

// SetDashboard adds the dashboard to the v2 dashboards Json post params
func (o *V2DashboardsJSONPostParams) SetDashboard(dashboard *models.Dashboard) {
	o.Dashboard = dashboard
}

// WriteToRequest writes these params to a swagger request
func (o *V2DashboardsJSONPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Dashboard != nil {
		if err := r.SetBodyParam(o.Dashboard); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
