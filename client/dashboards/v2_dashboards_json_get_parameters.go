// Code generated by go-swagger; DO NOT EDIT.

package dashboards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewV2DashboardsJSONGetParams creates a new V2DashboardsJSONGetParams object
// with the default values initialized.
func NewV2DashboardsJSONGetParams() *V2DashboardsJSONGetParams {
	var ()
	return &V2DashboardsJSONGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV2DashboardsJSONGetParamsWithTimeout creates a new V2DashboardsJSONGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV2DashboardsJSONGetParamsWithTimeout(timeout time.Duration) *V2DashboardsJSONGetParams {
	var ()
	return &V2DashboardsJSONGetParams{

		timeout: timeout,
	}
}

// NewV2DashboardsJSONGetParamsWithContext creates a new V2DashboardsJSONGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewV2DashboardsJSONGetParamsWithContext(ctx context.Context) *V2DashboardsJSONGetParams {
	var ()
	return &V2DashboardsJSONGetParams{

		Context: ctx,
	}
}

// NewV2DashboardsJSONGetParamsWithHTTPClient creates a new V2DashboardsJSONGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV2DashboardsJSONGetParamsWithHTTPClient(client *http.Client) *V2DashboardsJSONGetParams {
	var ()
	return &V2DashboardsJSONGetParams{
		HTTPClient: client,
	}
}

/*V2DashboardsJSONGetParams contains all the parameters to send to the API endpoint
for the v2 dashboards Json get operation typically these are written to a http.Request
*/
type V2DashboardsJSONGetParams struct {

	/*FilterCategory
	  Category is one of ('all' | 'favorite' | 'mine')

	*/
	FilterCategory *string
	/*FilterCreatedAfter
	  Created after given date

	*/
	FilterCreatedAfter *strfmt.DateTime
	/*FilterCreatedBefore
	  Created before given date

	*/
	FilterCreatedBefore *strfmt.DateTime
	/*FilterOwnerEmail
	  Contains owner email

	*/
	FilterOwnerEmail *string
	/*FilterTitle
	  Contains title

	*/
	FilterTitle *string
	/*FilterUpdatedAfter
	  Updated after given date

	*/
	FilterUpdatedAfter *strfmt.DateTime
	/*FilterUpdatedBefore
	  Updated before given date

	*/
	FilterUpdatedBefore *strfmt.DateTime
	/*Page
	  Pagination index

	*/
	Page *int64
	/*PerPage
	  Number of items per page

	*/
	PerPage *int64
	/*Sort
	  Sort is one of ('name' | 'recently viewed' | 'last edited')

	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) WithTimeout(timeout time.Duration) *V2DashboardsJSONGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) WithContext(ctx context.Context) *V2DashboardsJSONGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) WithHTTPClient(client *http.Client) *V2DashboardsJSONGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterCategory adds the filterCategory to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) WithFilterCategory(filterCategory *string) *V2DashboardsJSONGetParams {
	o.SetFilterCategory(filterCategory)
	return o
}

// SetFilterCategory adds the filterCategory to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) SetFilterCategory(filterCategory *string) {
	o.FilterCategory = filterCategory
}

// WithFilterCreatedAfter adds the filterCreatedAfter to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) WithFilterCreatedAfter(filterCreatedAfter *strfmt.DateTime) *V2DashboardsJSONGetParams {
	o.SetFilterCreatedAfter(filterCreatedAfter)
	return o
}

// SetFilterCreatedAfter adds the filterCreatedAfter to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) SetFilterCreatedAfter(filterCreatedAfter *strfmt.DateTime) {
	o.FilterCreatedAfter = filterCreatedAfter
}

// WithFilterCreatedBefore adds the filterCreatedBefore to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) WithFilterCreatedBefore(filterCreatedBefore *strfmt.DateTime) *V2DashboardsJSONGetParams {
	o.SetFilterCreatedBefore(filterCreatedBefore)
	return o
}

// SetFilterCreatedBefore adds the filterCreatedBefore to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) SetFilterCreatedBefore(filterCreatedBefore *strfmt.DateTime) {
	o.FilterCreatedBefore = filterCreatedBefore
}

// WithFilterOwnerEmail adds the filterOwnerEmail to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) WithFilterOwnerEmail(filterOwnerEmail *string) *V2DashboardsJSONGetParams {
	o.SetFilterOwnerEmail(filterOwnerEmail)
	return o
}

// SetFilterOwnerEmail adds the filterOwnerEmail to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) SetFilterOwnerEmail(filterOwnerEmail *string) {
	o.FilterOwnerEmail = filterOwnerEmail
}

// WithFilterTitle adds the filterTitle to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) WithFilterTitle(filterTitle *string) *V2DashboardsJSONGetParams {
	o.SetFilterTitle(filterTitle)
	return o
}

// SetFilterTitle adds the filterTitle to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) SetFilterTitle(filterTitle *string) {
	o.FilterTitle = filterTitle
}

// WithFilterUpdatedAfter adds the filterUpdatedAfter to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) WithFilterUpdatedAfter(filterUpdatedAfter *strfmt.DateTime) *V2DashboardsJSONGetParams {
	o.SetFilterUpdatedAfter(filterUpdatedAfter)
	return o
}

// SetFilterUpdatedAfter adds the filterUpdatedAfter to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) SetFilterUpdatedAfter(filterUpdatedAfter *strfmt.DateTime) {
	o.FilterUpdatedAfter = filterUpdatedAfter
}

// WithFilterUpdatedBefore adds the filterUpdatedBefore to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) WithFilterUpdatedBefore(filterUpdatedBefore *strfmt.DateTime) *V2DashboardsJSONGetParams {
	o.SetFilterUpdatedBefore(filterUpdatedBefore)
	return o
}

// SetFilterUpdatedBefore adds the filterUpdatedBefore to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) SetFilterUpdatedBefore(filterUpdatedBefore *strfmt.DateTime) {
	o.FilterUpdatedBefore = filterUpdatedBefore
}

// WithPage adds the page to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) WithPage(page *int64) *V2DashboardsJSONGetParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerPage adds the perPage to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) WithPerPage(perPage *int64) *V2DashboardsJSONGetParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithSort adds the sort to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) WithSort(sort *string) *V2DashboardsJSONGetParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the v2 dashboards Json get params
func (o *V2DashboardsJSONGetParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *V2DashboardsJSONGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterCategory != nil {

		// query param filter[category]
		var qrFilterCategory string
		if o.FilterCategory != nil {
			qrFilterCategory = *o.FilterCategory
		}
		qFilterCategory := qrFilterCategory
		if qFilterCategory != "" {
			if err := r.SetQueryParam("filter[category]", qFilterCategory); err != nil {
				return err
			}
		}

	}

	if o.FilterCreatedAfter != nil {

		// query param filter[created_after]
		var qrFilterCreatedAfter strfmt.DateTime
		if o.FilterCreatedAfter != nil {
			qrFilterCreatedAfter = *o.FilterCreatedAfter
		}
		qFilterCreatedAfter := qrFilterCreatedAfter.String()
		if qFilterCreatedAfter != "" {
			if err := r.SetQueryParam("filter[created_after]", qFilterCreatedAfter); err != nil {
				return err
			}
		}

	}

	if o.FilterCreatedBefore != nil {

		// query param filter[created_before]
		var qrFilterCreatedBefore strfmt.DateTime
		if o.FilterCreatedBefore != nil {
			qrFilterCreatedBefore = *o.FilterCreatedBefore
		}
		qFilterCreatedBefore := qrFilterCreatedBefore.String()
		if qFilterCreatedBefore != "" {
			if err := r.SetQueryParam("filter[created_before]", qFilterCreatedBefore); err != nil {
				return err
			}
		}

	}

	if o.FilterOwnerEmail != nil {

		// query param filter[owner_email]
		var qrFilterOwnerEmail string
		if o.FilterOwnerEmail != nil {
			qrFilterOwnerEmail = *o.FilterOwnerEmail
		}
		qFilterOwnerEmail := qrFilterOwnerEmail
		if qFilterOwnerEmail != "" {
			if err := r.SetQueryParam("filter[owner_email]", qFilterOwnerEmail); err != nil {
				return err
			}
		}

	}

	if o.FilterTitle != nil {

		// query param filter[title]
		var qrFilterTitle string
		if o.FilterTitle != nil {
			qrFilterTitle = *o.FilterTitle
		}
		qFilterTitle := qrFilterTitle
		if qFilterTitle != "" {
			if err := r.SetQueryParam("filter[title]", qFilterTitle); err != nil {
				return err
			}
		}

	}

	if o.FilterUpdatedAfter != nil {

		// query param filter[updated_after]
		var qrFilterUpdatedAfter strfmt.DateTime
		if o.FilterUpdatedAfter != nil {
			qrFilterUpdatedAfter = *o.FilterUpdatedAfter
		}
		qFilterUpdatedAfter := qrFilterUpdatedAfter.String()
		if qFilterUpdatedAfter != "" {
			if err := r.SetQueryParam("filter[updated_after]", qFilterUpdatedAfter); err != nil {
				return err
			}
		}

	}

	if o.FilterUpdatedBefore != nil {

		// query param filter[updated_before]
		var qrFilterUpdatedBefore strfmt.DateTime
		if o.FilterUpdatedBefore != nil {
			qrFilterUpdatedBefore = *o.FilterUpdatedBefore
		}
		qFilterUpdatedBefore := qrFilterUpdatedBefore.String()
		if qFilterUpdatedBefore != "" {
			if err := r.SetQueryParam("filter[updated_before]", qFilterUpdatedBefore); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
