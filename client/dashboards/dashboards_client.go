// Code generated by go-swagger; DO NOT EDIT.

package dashboards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new dashboards API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dashboards API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
V2DashboardsJSONByIDDelete deletes

Delete
*/
func (a *Client) V2DashboardsJSONByIDDelete(params *V2DashboardsJSONByIDDeleteParams) (*V2DashboardsJSONByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2DashboardsJSONByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2DashboardsJsonByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/v2/dashboards/{dashboard_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2DashboardsJSONByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2DashboardsJSONByIDDeleteOK), nil

}

/*
V2DashboardsJSONByIDGet shows

Show
*/
func (a *Client) V2DashboardsJSONByIDGet(params *V2DashboardsJSONByIDGetParams) (*V2DashboardsJSONByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2DashboardsJSONByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2DashboardsJsonByIdGet",
		Method:             "GET",
		PathPattern:        "/v2/dashboards/{dashboard_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2DashboardsJSONByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2DashboardsJSONByIDGetOK), nil

}

/*
V2DashboardsJSONByIDPut updates

Update
*/
func (a *Client) V2DashboardsJSONByIDPut(params *V2DashboardsJSONByIDPutParams) (*V2DashboardsJSONByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2DashboardsJSONByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2DashboardsJsonByIdPut",
		Method:             "PUT",
		PathPattern:        "/v2/dashboards/{dashboard_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2DashboardsJSONByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2DashboardsJSONByIDPutOK), nil

}

/*
V2DashboardsJSONGet lists

List
*/
func (a *Client) V2DashboardsJSONGet(params *V2DashboardsJSONGetParams) (*V2DashboardsJSONGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2DashboardsJSONGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2DashboardsJsonGet",
		Method:             "GET",
		PathPattern:        "/v2/dashboards.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2DashboardsJSONGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2DashboardsJSONGetOK), nil

}

/*
V2DashboardsJSONPost creates

Create
*/
func (a *Client) V2DashboardsJSONPost(params *V2DashboardsJSONPostParams) (*V2DashboardsJSONPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2DashboardsJSONPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2DashboardsJsonPost",
		Method:             "POST",
		PathPattern:        "/v2/dashboards.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2DashboardsJSONPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2DashboardsJSONPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
