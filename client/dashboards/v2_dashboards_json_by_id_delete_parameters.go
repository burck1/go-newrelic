// Code generated by go-swagger; DO NOT EDIT.

package dashboards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewV2DashboardsJSONByIDDeleteParams creates a new V2DashboardsJSONByIDDeleteParams object
// with the default values initialized.
func NewV2DashboardsJSONByIDDeleteParams() *V2DashboardsJSONByIDDeleteParams {
	var ()
	return &V2DashboardsJSONByIDDeleteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV2DashboardsJSONByIDDeleteParamsWithTimeout creates a new V2DashboardsJSONByIDDeleteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV2DashboardsJSONByIDDeleteParamsWithTimeout(timeout time.Duration) *V2DashboardsJSONByIDDeleteParams {
	var ()
	return &V2DashboardsJSONByIDDeleteParams{

		timeout: timeout,
	}
}

// NewV2DashboardsJSONByIDDeleteParamsWithContext creates a new V2DashboardsJSONByIDDeleteParams object
// with the default values initialized, and the ability to set a context for a request
func NewV2DashboardsJSONByIDDeleteParamsWithContext(ctx context.Context) *V2DashboardsJSONByIDDeleteParams {
	var ()
	return &V2DashboardsJSONByIDDeleteParams{

		Context: ctx,
	}
}

// NewV2DashboardsJSONByIDDeleteParamsWithHTTPClient creates a new V2DashboardsJSONByIDDeleteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV2DashboardsJSONByIDDeleteParamsWithHTTPClient(client *http.Client) *V2DashboardsJSONByIDDeleteParams {
	var ()
	return &V2DashboardsJSONByIDDeleteParams{
		HTTPClient: client,
	}
}

/*V2DashboardsJSONByIDDeleteParams contains all the parameters to send to the API endpoint
for the v2 dashboards Json by Id delete operation typically these are written to a http.Request
*/
type V2DashboardsJSONByIDDeleteParams struct {

	/*DashboardID
	  Dashboard ID

	*/
	DashboardID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v2 dashboards Json by Id delete params
func (o *V2DashboardsJSONByIDDeleteParams) WithTimeout(timeout time.Duration) *V2DashboardsJSONByIDDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v2 dashboards Json by Id delete params
func (o *V2DashboardsJSONByIDDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v2 dashboards Json by Id delete params
func (o *V2DashboardsJSONByIDDeleteParams) WithContext(ctx context.Context) *V2DashboardsJSONByIDDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v2 dashboards Json by Id delete params
func (o *V2DashboardsJSONByIDDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v2 dashboards Json by Id delete params
func (o *V2DashboardsJSONByIDDeleteParams) WithHTTPClient(client *http.Client) *V2DashboardsJSONByIDDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v2 dashboards Json by Id delete params
func (o *V2DashboardsJSONByIDDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDashboardID adds the dashboardID to the v2 dashboards Json by Id delete params
func (o *V2DashboardsJSONByIDDeleteParams) WithDashboardID(dashboardID int64) *V2DashboardsJSONByIDDeleteParams {
	o.SetDashboardID(dashboardID)
	return o
}

// SetDashboardID adds the dashboardId to the v2 dashboards Json by Id delete params
func (o *V2DashboardsJSONByIDDeleteParams) SetDashboardID(dashboardID int64) {
	o.DashboardID = dashboardID
}

// WriteToRequest writes these params to a swagger request
func (o *V2DashboardsJSONByIDDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param dashboard_id
	if err := r.SetPathParam("dashboard_id", swag.FormatInt64(o.DashboardID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
