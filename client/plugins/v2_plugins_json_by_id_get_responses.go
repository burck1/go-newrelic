// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/burck1/go-newrelic/models"
)

// V2PluginsJSONByIDGetReader is a Reader for the V2PluginsJSONByIDGet structure.
type V2PluginsJSONByIDGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V2PluginsJSONByIDGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewV2PluginsJSONByIDGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewV2PluginsJSONByIDGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewV2PluginsJSONByIDGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewV2PluginsJSONByIDGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewV2PluginsJSONByIDGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewV2PluginsJSONByIDGetOK creates a V2PluginsJSONByIDGetOK with default headers values
func NewV2PluginsJSONByIDGetOK() *V2PluginsJSONByIDGetOK {
	return &V2PluginsJSONByIDGetOK{}
}

/*V2PluginsJSONByIDGetOK handles this case with default header values.

OK
*/
type V2PluginsJSONByIDGetOK struct {
	Payload *models.PluginResponse
}

func (o *V2PluginsJSONByIDGetOK) Error() string {
	return fmt.Sprintf("[GET /v2/plugins/{plugin_id}.json][%d] v2PluginsJsonByIdGetOK  %+v", 200, o.Payload)
}

func (o *V2PluginsJSONByIDGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PluginResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2PluginsJSONByIDGetUnauthorized creates a V2PluginsJSONByIDGetUnauthorized with default headers values
func NewV2PluginsJSONByIDGetUnauthorized() *V2PluginsJSONByIDGetUnauthorized {
	return &V2PluginsJSONByIDGetUnauthorized{}
}

/*V2PluginsJSONByIDGetUnauthorized handles this case with default header values.

Invalid API key
*/
type V2PluginsJSONByIDGetUnauthorized struct {
	Payload interface{}
}

func (o *V2PluginsJSONByIDGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/plugins/{plugin_id}.json][%d] v2PluginsJsonByIdGetUnauthorized  %+v", 401, o.Payload)
}

func (o *V2PluginsJSONByIDGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2PluginsJSONByIDGetForbidden creates a V2PluginsJSONByIDGetForbidden with default headers values
func NewV2PluginsJSONByIDGetForbidden() *V2PluginsJSONByIDGetForbidden {
	return &V2PluginsJSONByIDGetForbidden{}
}

/*V2PluginsJSONByIDGetForbidden handles this case with default header values.

New Relic API access has not been enabled
*/
type V2PluginsJSONByIDGetForbidden struct {
	Payload interface{}
}

func (o *V2PluginsJSONByIDGetForbidden) Error() string {
	return fmt.Sprintf("[GET /v2/plugins/{plugin_id}.json][%d] v2PluginsJsonByIdGetForbidden  %+v", 403, o.Payload)
}

func (o *V2PluginsJSONByIDGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2PluginsJSONByIDGetNotFound creates a V2PluginsJSONByIDGetNotFound with default headers values
func NewV2PluginsJSONByIDGetNotFound() *V2PluginsJSONByIDGetNotFound {
	return &V2PluginsJSONByIDGetNotFound{}
}

/*V2PluginsJSONByIDGetNotFound handles this case with default header values.

No Plugin found with given ID
*/
type V2PluginsJSONByIDGetNotFound struct {
	Payload interface{}
}

func (o *V2PluginsJSONByIDGetNotFound) Error() string {
	return fmt.Sprintf("[GET /v2/plugins/{plugin_id}.json][%d] v2PluginsJsonByIdGetNotFound  %+v", 404, o.Payload)
}

func (o *V2PluginsJSONByIDGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2PluginsJSONByIDGetDefault creates a V2PluginsJSONByIDGetDefault with default headers values
func NewV2PluginsJSONByIDGetDefault(code int) *V2PluginsJSONByIDGetDefault {
	return &V2PluginsJSONByIDGetDefault{
		_statusCode: code,
	}
}

/*V2PluginsJSONByIDGetDefault handles this case with default header values.

A server error occurred, please contact <a href="http://support.newrelic.com">New Relic support</a>
*/
type V2PluginsJSONByIDGetDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the v2 plugins Json by Id get default response
func (o *V2PluginsJSONByIDGetDefault) Code() int {
	return o._statusCode
}

func (o *V2PluginsJSONByIDGetDefault) Error() string {
	return fmt.Sprintf("[GET /v2/plugins/{plugin_id}.json][%d] V2PluginsJsonByIdGet default  %+v", o._statusCode, o.Payload)
}

func (o *V2PluginsJSONByIDGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
