// Code generated by go-swagger; DO NOT EDIT.

package application_deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new application deployments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for application deployments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
V2ApplicationsDeploymentsJSONByApplicationIDAndIDDelete deletes

Delete
*/
func (a *Client) V2ApplicationsDeploymentsJSONByApplicationIDAndIDDelete(params *V2ApplicationsDeploymentsJSONByApplicationIDAndIDDeleteParams) (*V2ApplicationsDeploymentsJSONByApplicationIDAndIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsDeploymentsJSONByApplicationIDAndIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsDeploymentsJsonByApplicationIdAndIdDelete",
		Method:             "DELETE",
		PathPattern:        "/v2/applications/{application_id}/deployments/{deployment_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsDeploymentsJSONByApplicationIDAndIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsDeploymentsJSONByApplicationIDAndIDDeleteOK), nil

}

/*
V2ApplicationsDeploymentsJSONByApplicationIDGet lists

List
*/
func (a *Client) V2ApplicationsDeploymentsJSONByApplicationIDGet(params *V2ApplicationsDeploymentsJSONByApplicationIDGetParams) (*V2ApplicationsDeploymentsJSONByApplicationIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsDeploymentsJSONByApplicationIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsDeploymentsJsonByApplicationIdGet",
		Method:             "GET",
		PathPattern:        "/v2/applications/{application_id}/deployments.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsDeploymentsJSONByApplicationIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsDeploymentsJSONByApplicationIDGetOK), nil

}

/*
V2ApplicationsDeploymentsJSONByApplicationIDPost creates

Create
*/
func (a *Client) V2ApplicationsDeploymentsJSONByApplicationIDPost(params *V2ApplicationsDeploymentsJSONByApplicationIDPostParams) (*V2ApplicationsDeploymentsJSONByApplicationIDPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ApplicationsDeploymentsJSONByApplicationIDPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ApplicationsDeploymentsJsonByApplicationIdPost",
		Method:             "POST",
		PathPattern:        "/v2/applications/{application_id}/deployments.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ApplicationsDeploymentsJSONByApplicationIDPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ApplicationsDeploymentsJSONByApplicationIDPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
