// Code generated by go-swagger; DO NOT EDIT.

package alerts_conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/burck1/go-newrelic/models"
)

// V2AlertsConditionsJSONGetReader is a Reader for the V2AlertsConditionsJSONGet structure.
type V2AlertsConditionsJSONGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V2AlertsConditionsJSONGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewV2AlertsConditionsJSONGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewV2AlertsConditionsJSONGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewV2AlertsConditionsJSONGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewV2AlertsConditionsJSONGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewV2AlertsConditionsJSONGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewV2AlertsConditionsJSONGetOK creates a V2AlertsConditionsJSONGetOK with default headers values
func NewV2AlertsConditionsJSONGetOK() *V2AlertsConditionsJSONGetOK {
	return &V2AlertsConditionsJSONGetOK{}
}

/*V2AlertsConditionsJSONGetOK handles this case with default header values.

OK
*/
type V2AlertsConditionsJSONGetOK struct {
	Payload *models.ConditionResponse
}

func (o *V2AlertsConditionsJSONGetOK) Error() string {
	return fmt.Sprintf("[GET /v2/alerts_conditions.json][%d] v2AlertsConditionsJsonGetOK  %+v", 200, o.Payload)
}

func (o *V2AlertsConditionsJSONGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConditionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AlertsConditionsJSONGetUnauthorized creates a V2AlertsConditionsJSONGetUnauthorized with default headers values
func NewV2AlertsConditionsJSONGetUnauthorized() *V2AlertsConditionsJSONGetUnauthorized {
	return &V2AlertsConditionsJSONGetUnauthorized{}
}

/*V2AlertsConditionsJSONGetUnauthorized handles this case with default header values.

Invalid API key
*/
type V2AlertsConditionsJSONGetUnauthorized struct {
	Payload interface{}
}

func (o *V2AlertsConditionsJSONGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/alerts_conditions.json][%d] v2AlertsConditionsJsonGetUnauthorized  %+v", 401, o.Payload)
}

func (o *V2AlertsConditionsJSONGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AlertsConditionsJSONGetForbidden creates a V2AlertsConditionsJSONGetForbidden with default headers values
func NewV2AlertsConditionsJSONGetForbidden() *V2AlertsConditionsJSONGetForbidden {
	return &V2AlertsConditionsJSONGetForbidden{}
}

/*V2AlertsConditionsJSONGetForbidden handles this case with default header values.

New Relic API access has not been enabled
*/
type V2AlertsConditionsJSONGetForbidden struct {
	Payload interface{}
}

func (o *V2AlertsConditionsJSONGetForbidden) Error() string {
	return fmt.Sprintf("[GET /v2/alerts_conditions.json][%d] v2AlertsConditionsJsonGetForbidden  %+v", 403, o.Payload)
}

func (o *V2AlertsConditionsJSONGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AlertsConditionsJSONGetNotFound creates a V2AlertsConditionsJSONGetNotFound with default headers values
func NewV2AlertsConditionsJSONGetNotFound() *V2AlertsConditionsJSONGetNotFound {
	return &V2AlertsConditionsJSONGetNotFound{}
}

/*V2AlertsConditionsJSONGetNotFound handles this case with default header values.

No Alerts policy was found for the given ID
*/
type V2AlertsConditionsJSONGetNotFound struct {
	Payload interface{}
}

func (o *V2AlertsConditionsJSONGetNotFound) Error() string {
	return fmt.Sprintf("[GET /v2/alerts_conditions.json][%d] v2AlertsConditionsJsonGetNotFound  %+v", 404, o.Payload)
}

func (o *V2AlertsConditionsJSONGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AlertsConditionsJSONGetDefault creates a V2AlertsConditionsJSONGetDefault with default headers values
func NewV2AlertsConditionsJSONGetDefault(code int) *V2AlertsConditionsJSONGetDefault {
	return &V2AlertsConditionsJSONGetDefault{
		_statusCode: code,
	}
}

/*V2AlertsConditionsJSONGetDefault handles this case with default header values.

A server error occurred, please contact <a href="http://support.newrelic.com">New Relic support</a>
*/
type V2AlertsConditionsJSONGetDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the v2 alerts conditions Json get default response
func (o *V2AlertsConditionsJSONGetDefault) Code() int {
	return o._statusCode
}

func (o *V2AlertsConditionsJSONGetDefault) Error() string {
	return fmt.Sprintf("[GET /v2/alerts_conditions.json][%d] V2AlertsConditionsJsonGet default  %+v", o._statusCode, o.Payload)
}

func (o *V2AlertsConditionsJSONGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
