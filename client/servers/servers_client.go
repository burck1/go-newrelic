// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new servers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for servers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
V2ServersJSONByIDDelete deletes

Delete
*/
func (a *Client) V2ServersJSONByIDDelete(params *V2ServersJSONByIDDeleteParams) (*V2ServersJSONByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ServersJSONByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ServersJsonByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/v2/servers/{server_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ServersJSONByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ServersJSONByIDDeleteOK), nil

}

/*
V2ServersJSONByIDGet shows

Show
*/
func (a *Client) V2ServersJSONByIDGet(params *V2ServersJSONByIDGetParams) (*V2ServersJSONByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ServersJSONByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ServersJsonByIdGet",
		Method:             "GET",
		PathPattern:        "/v2/servers/{server_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ServersJSONByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ServersJSONByIDGetOK), nil

}

/*
V2ServersJSONByIDPut updates

Update
*/
func (a *Client) V2ServersJSONByIDPut(params *V2ServersJSONByIDPutParams) (*V2ServersJSONByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ServersJSONByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ServersJsonByIdPut",
		Method:             "PUT",
		PathPattern:        "/v2/servers/{server_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ServersJSONByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ServersJSONByIDPutOK), nil

}

/*
V2ServersJSONGet lists

List
*/
func (a *Client) V2ServersJSONGet(params *V2ServersJSONGetParams) (*V2ServersJSONGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ServersJSONGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ServersJsonGet",
		Method:             "GET",
		PathPattern:        "/v2/servers.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ServersJSONGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ServersJSONGetOK), nil

}

/*
V2ServersMetricsDataJSONByServerIDGet data

Metric Data
*/
func (a *Client) V2ServersMetricsDataJSONByServerIDGet(params *V2ServersMetricsDataJSONByServerIDGetParams) (*V2ServersMetricsDataJSONByServerIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ServersMetricsDataJSONByServerIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ServersMetricsDataJsonByServerIdGet",
		Method:             "GET",
		PathPattern:        "/v2/servers/{server_id}/metrics/data.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ServersMetricsDataJSONByServerIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ServersMetricsDataJSONByServerIDGetOK), nil

}

/*
V2ServersMetricsJSONByServerIDGet names

Metric Names
*/
func (a *Client) V2ServersMetricsJSONByServerIDGet(params *V2ServersMetricsJSONByServerIDGetParams) (*V2ServersMetricsJSONByServerIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2ServersMetricsJSONByServerIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2ServersMetricsJsonByServerIdGet",
		Method:             "GET",
		PathPattern:        "/v2/servers/{server_id}/metrics.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2ServersMetricsJSONByServerIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2ServersMetricsJSONByServerIDGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
