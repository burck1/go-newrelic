// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/burck1/go-newrelic/models"
)

// V2ServersJSONByIDPutReader is a Reader for the V2ServersJSONByIDPut structure.
type V2ServersJSONByIDPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V2ServersJSONByIDPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewV2ServersJSONByIDPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewV2ServersJSONByIDPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewV2ServersJSONByIDPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewV2ServersJSONByIDPutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewV2ServersJSONByIDPutUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewV2ServersJSONByIDPutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewV2ServersJSONByIDPutOK creates a V2ServersJSONByIDPutOK with default headers values
func NewV2ServersJSONByIDPutOK() *V2ServersJSONByIDPutOK {
	return &V2ServersJSONByIDPutOK{}
}

/*V2ServersJSONByIDPutOK handles this case with default header values.

OK
*/
type V2ServersJSONByIDPutOK struct {
	Payload *models.ServerResponse
}

func (o *V2ServersJSONByIDPutOK) Error() string {
	return fmt.Sprintf("[PUT /v2/servers/{server_id}.json][%d] v2ServersJsonByIdPutOK  %+v", 200, o.Payload)
}

func (o *V2ServersJSONByIDPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ServersJSONByIDPutUnauthorized creates a V2ServersJSONByIDPutUnauthorized with default headers values
func NewV2ServersJSONByIDPutUnauthorized() *V2ServersJSONByIDPutUnauthorized {
	return &V2ServersJSONByIDPutUnauthorized{}
}

/*V2ServersJSONByIDPutUnauthorized handles this case with default header values.

Invalid API key
*/
type V2ServersJSONByIDPutUnauthorized struct {
	Payload interface{}
}

func (o *V2ServersJSONByIDPutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v2/servers/{server_id}.json][%d] v2ServersJsonByIdPutUnauthorized  %+v", 401, o.Payload)
}

func (o *V2ServersJSONByIDPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ServersJSONByIDPutForbidden creates a V2ServersJSONByIDPutForbidden with default headers values
func NewV2ServersJSONByIDPutForbidden() *V2ServersJSONByIDPutForbidden {
	return &V2ServersJSONByIDPutForbidden{}
}

/*V2ServersJSONByIDPutForbidden handles this case with default header values.

New Relic API access has not been enabled
*/
type V2ServersJSONByIDPutForbidden struct {
	Payload interface{}
}

func (o *V2ServersJSONByIDPutForbidden) Error() string {
	return fmt.Sprintf("[PUT /v2/servers/{server_id}.json][%d] v2ServersJsonByIdPutForbidden  %+v", 403, o.Payload)
}

func (o *V2ServersJSONByIDPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ServersJSONByIDPutNotFound creates a V2ServersJSONByIDPutNotFound with default headers values
func NewV2ServersJSONByIDPutNotFound() *V2ServersJSONByIDPutNotFound {
	return &V2ServersJSONByIDPutNotFound{}
}

/*V2ServersJSONByIDPutNotFound handles this case with default header values.

No Server found with the given ID
*/
type V2ServersJSONByIDPutNotFound struct {
	Payload interface{}
}

func (o *V2ServersJSONByIDPutNotFound) Error() string {
	return fmt.Sprintf("[PUT /v2/servers/{server_id}.json][%d] v2ServersJsonByIdPutNotFound  %+v", 404, o.Payload)
}

func (o *V2ServersJSONByIDPutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ServersJSONByIDPutUnprocessableEntity creates a V2ServersJSONByIDPutUnprocessableEntity with default headers values
func NewV2ServersJSONByIDPutUnprocessableEntity() *V2ServersJSONByIDPutUnprocessableEntity {
	return &V2ServersJSONByIDPutUnprocessableEntity{}
}

/*V2ServersJSONByIDPutUnprocessableEntity handles this case with default header values.

Invalid attributes were sent to update
*/
type V2ServersJSONByIDPutUnprocessableEntity struct {
	Payload interface{}
}

func (o *V2ServersJSONByIDPutUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /v2/servers/{server_id}.json][%d] v2ServersJsonByIdPutUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *V2ServersJSONByIDPutUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ServersJSONByIDPutDefault creates a V2ServersJSONByIDPutDefault with default headers values
func NewV2ServersJSONByIDPutDefault(code int) *V2ServersJSONByIDPutDefault {
	return &V2ServersJSONByIDPutDefault{
		_statusCode: code,
	}
}

/*V2ServersJSONByIDPutDefault handles this case with default header values.

A server error occurred, please contact <a href="http://support.newrelic.com">New Relic support</a>
*/
type V2ServersJSONByIDPutDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the v2 servers Json by Id put default response
func (o *V2ServersJSONByIDPutDefault) Code() int {
	return o._statusCode
}

func (o *V2ServersJSONByIDPutDefault) Error() string {
	return fmt.Sprintf("[PUT /v2/servers/{server_id}.json][%d] V2ServersJsonByIdPut default  %+v", o._statusCode, o.Payload)
}

func (o *V2ServersJSONByIDPutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
