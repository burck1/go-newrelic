// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/burck1/go-newrelic/models"
)

// V2ServersJSONByIDGetReader is a Reader for the V2ServersJSONByIDGet structure.
type V2ServersJSONByIDGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V2ServersJSONByIDGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewV2ServersJSONByIDGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewV2ServersJSONByIDGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewV2ServersJSONByIDGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewV2ServersJSONByIDGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewV2ServersJSONByIDGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewV2ServersJSONByIDGetOK creates a V2ServersJSONByIDGetOK with default headers values
func NewV2ServersJSONByIDGetOK() *V2ServersJSONByIDGetOK {
	return &V2ServersJSONByIDGetOK{}
}

/*V2ServersJSONByIDGetOK handles this case with default header values.

OK
*/
type V2ServersJSONByIDGetOK struct {
	Payload *models.ServerResponse
}

func (o *V2ServersJSONByIDGetOK) Error() string {
	return fmt.Sprintf("[GET /v2/servers/{server_id}.json][%d] v2ServersJsonByIdGetOK  %+v", 200, o.Payload)
}

func (o *V2ServersJSONByIDGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ServersJSONByIDGetUnauthorized creates a V2ServersJSONByIDGetUnauthorized with default headers values
func NewV2ServersJSONByIDGetUnauthorized() *V2ServersJSONByIDGetUnauthorized {
	return &V2ServersJSONByIDGetUnauthorized{}
}

/*V2ServersJSONByIDGetUnauthorized handles this case with default header values.

Invalid API key
*/
type V2ServersJSONByIDGetUnauthorized struct {
	Payload interface{}
}

func (o *V2ServersJSONByIDGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/servers/{server_id}.json][%d] v2ServersJsonByIdGetUnauthorized  %+v", 401, o.Payload)
}

func (o *V2ServersJSONByIDGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ServersJSONByIDGetForbidden creates a V2ServersJSONByIDGetForbidden with default headers values
func NewV2ServersJSONByIDGetForbidden() *V2ServersJSONByIDGetForbidden {
	return &V2ServersJSONByIDGetForbidden{}
}

/*V2ServersJSONByIDGetForbidden handles this case with default header values.

New Relic API access has not been enabled
*/
type V2ServersJSONByIDGetForbidden struct {
	Payload interface{}
}

func (o *V2ServersJSONByIDGetForbidden) Error() string {
	return fmt.Sprintf("[GET /v2/servers/{server_id}.json][%d] v2ServersJsonByIdGetForbidden  %+v", 403, o.Payload)
}

func (o *V2ServersJSONByIDGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ServersJSONByIDGetNotFound creates a V2ServersJSONByIDGetNotFound with default headers values
func NewV2ServersJSONByIDGetNotFound() *V2ServersJSONByIDGetNotFound {
	return &V2ServersJSONByIDGetNotFound{}
}

/*V2ServersJSONByIDGetNotFound handles this case with default header values.

No Server found with the given ID
*/
type V2ServersJSONByIDGetNotFound struct {
	Payload interface{}
}

func (o *V2ServersJSONByIDGetNotFound) Error() string {
	return fmt.Sprintf("[GET /v2/servers/{server_id}.json][%d] v2ServersJsonByIdGetNotFound  %+v", 404, o.Payload)
}

func (o *V2ServersJSONByIDGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2ServersJSONByIDGetDefault creates a V2ServersJSONByIDGetDefault with default headers values
func NewV2ServersJSONByIDGetDefault(code int) *V2ServersJSONByIDGetDefault {
	return &V2ServersJSONByIDGetDefault{
		_statusCode: code,
	}
}

/*V2ServersJSONByIDGetDefault handles this case with default header values.

A server error occurred, please contact <a href="http://support.newrelic.com">New Relic support</a>
*/
type V2ServersJSONByIDGetDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the v2 servers Json by Id get default response
func (o *V2ServersJSONByIDGetDefault) Code() int {
	return o._statusCode
}

func (o *V2ServersJSONByIDGetDefault) Error() string {
	return fmt.Sprintf("[GET /v2/servers/{server_id}.json][%d] V2ServersJsonByIdGet default  %+v", o._statusCode, o.Payload)
}

func (o *V2ServersJSONByIDGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
