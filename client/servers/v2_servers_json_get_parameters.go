// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewV2ServersJSONGetParams creates a new V2ServersJSONGetParams object
// with the default values initialized.
func NewV2ServersJSONGetParams() *V2ServersJSONGetParams {
	var ()
	return &V2ServersJSONGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV2ServersJSONGetParamsWithTimeout creates a new V2ServersJSONGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV2ServersJSONGetParamsWithTimeout(timeout time.Duration) *V2ServersJSONGetParams {
	var ()
	return &V2ServersJSONGetParams{

		timeout: timeout,
	}
}

// NewV2ServersJSONGetParamsWithContext creates a new V2ServersJSONGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewV2ServersJSONGetParamsWithContext(ctx context.Context) *V2ServersJSONGetParams {
	var ()
	return &V2ServersJSONGetParams{

		Context: ctx,
	}
}

// NewV2ServersJSONGetParamsWithHTTPClient creates a new V2ServersJSONGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV2ServersJSONGetParamsWithHTTPClient(client *http.Client) *V2ServersJSONGetParams {
	var ()
	return &V2ServersJSONGetParams{
		HTTPClient: client,
	}
}

/*V2ServersJSONGetParams contains all the parameters to send to the API endpoint
for the v2 servers Json get operation typically these are written to a http.Request
*/
type V2ServersJSONGetParams struct {

	/*FilterHost
	  Filter by host

	*/
	FilterHost *string
	/*FilterIds
	  Filter by server IDs

	*/
	FilterIds []int64
	/*FilterLabels
	  Filter by server labels (beta)

	*/
	FilterLabels *string
	/*FilterName
	  Filter by name

	*/
	FilterName *string
	/*FilterReported
	  Filter by reported in last 10 hours

	*/
	FilterReported *bool
	/*Page
	  Pagination index

	*/
	Page *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v2 servers Json get params
func (o *V2ServersJSONGetParams) WithTimeout(timeout time.Duration) *V2ServersJSONGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v2 servers Json get params
func (o *V2ServersJSONGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v2 servers Json get params
func (o *V2ServersJSONGetParams) WithContext(ctx context.Context) *V2ServersJSONGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v2 servers Json get params
func (o *V2ServersJSONGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v2 servers Json get params
func (o *V2ServersJSONGetParams) WithHTTPClient(client *http.Client) *V2ServersJSONGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v2 servers Json get params
func (o *V2ServersJSONGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterHost adds the filterHost to the v2 servers Json get params
func (o *V2ServersJSONGetParams) WithFilterHost(filterHost *string) *V2ServersJSONGetParams {
	o.SetFilterHost(filterHost)
	return o
}

// SetFilterHost adds the filterHost to the v2 servers Json get params
func (o *V2ServersJSONGetParams) SetFilterHost(filterHost *string) {
	o.FilterHost = filterHost
}

// WithFilterIds adds the filterIds to the v2 servers Json get params
func (o *V2ServersJSONGetParams) WithFilterIds(filterIds []int64) *V2ServersJSONGetParams {
	o.SetFilterIds(filterIds)
	return o
}

// SetFilterIds adds the filterIds to the v2 servers Json get params
func (o *V2ServersJSONGetParams) SetFilterIds(filterIds []int64) {
	o.FilterIds = filterIds
}

// WithFilterLabels adds the filterLabels to the v2 servers Json get params
func (o *V2ServersJSONGetParams) WithFilterLabels(filterLabels *string) *V2ServersJSONGetParams {
	o.SetFilterLabels(filterLabels)
	return o
}

// SetFilterLabels adds the filterLabels to the v2 servers Json get params
func (o *V2ServersJSONGetParams) SetFilterLabels(filterLabels *string) {
	o.FilterLabels = filterLabels
}

// WithFilterName adds the filterName to the v2 servers Json get params
func (o *V2ServersJSONGetParams) WithFilterName(filterName *string) *V2ServersJSONGetParams {
	o.SetFilterName(filterName)
	return o
}

// SetFilterName adds the filterName to the v2 servers Json get params
func (o *V2ServersJSONGetParams) SetFilterName(filterName *string) {
	o.FilterName = filterName
}

// WithFilterReported adds the filterReported to the v2 servers Json get params
func (o *V2ServersJSONGetParams) WithFilterReported(filterReported *bool) *V2ServersJSONGetParams {
	o.SetFilterReported(filterReported)
	return o
}

// SetFilterReported adds the filterReported to the v2 servers Json get params
func (o *V2ServersJSONGetParams) SetFilterReported(filterReported *bool) {
	o.FilterReported = filterReported
}

// WithPage adds the page to the v2 servers Json get params
func (o *V2ServersJSONGetParams) WithPage(page *int64) *V2ServersJSONGetParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the v2 servers Json get params
func (o *V2ServersJSONGetParams) SetPage(page *int64) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *V2ServersJSONGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterHost != nil {

		// query param filter[host]
		var qrFilterHost string
		if o.FilterHost != nil {
			qrFilterHost = *o.FilterHost
		}
		qFilterHost := qrFilterHost
		if qFilterHost != "" {
			if err := r.SetQueryParam("filter[host]", qFilterHost); err != nil {
				return err
			}
		}

	}

	var valuesFilterIds []string
	for _, v := range o.FilterIds {
		valuesFilterIds = append(valuesFilterIds, swag.FormatInt64(v))
	}

	joinedFilterIds := swag.JoinByFormat(valuesFilterIds, "csv")
	// query array param filter[ids]
	if err := r.SetQueryParam("filter[ids]", joinedFilterIds...); err != nil {
		return err
	}

	if o.FilterLabels != nil {

		// query param filter[labels]
		var qrFilterLabels string
		if o.FilterLabels != nil {
			qrFilterLabels = *o.FilterLabels
		}
		qFilterLabels := qrFilterLabels
		if qFilterLabels != "" {
			if err := r.SetQueryParam("filter[labels]", qFilterLabels); err != nil {
				return err
			}
		}

	}

	if o.FilterName != nil {

		// query param filter[name]
		var qrFilterName string
		if o.FilterName != nil {
			qrFilterName = *o.FilterName
		}
		qFilterName := qrFilterName
		if qFilterName != "" {
			if err := r.SetQueryParam("filter[name]", qFilterName); err != nil {
				return err
			}
		}

	}

	if o.FilterReported != nil {

		// query param filter[reported]
		var qrFilterReported bool
		if o.FilterReported != nil {
			qrFilterReported = *o.FilterReported
		}
		qFilterReported := swag.FormatBool(qrFilterReported)
		if qFilterReported != "" {
			if err := r.SetQueryParam("filter[reported]", qFilterReported); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
