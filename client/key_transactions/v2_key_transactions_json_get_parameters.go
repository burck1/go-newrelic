// Code generated by go-swagger; DO NOT EDIT.

package key_transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewV2KeyTransactionsJSONGetParams creates a new V2KeyTransactionsJSONGetParams object
// with the default values initialized.
func NewV2KeyTransactionsJSONGetParams() *V2KeyTransactionsJSONGetParams {
	var ()
	return &V2KeyTransactionsJSONGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV2KeyTransactionsJSONGetParamsWithTimeout creates a new V2KeyTransactionsJSONGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV2KeyTransactionsJSONGetParamsWithTimeout(timeout time.Duration) *V2KeyTransactionsJSONGetParams {
	var ()
	return &V2KeyTransactionsJSONGetParams{

		timeout: timeout,
	}
}

// NewV2KeyTransactionsJSONGetParamsWithContext creates a new V2KeyTransactionsJSONGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewV2KeyTransactionsJSONGetParamsWithContext(ctx context.Context) *V2KeyTransactionsJSONGetParams {
	var ()
	return &V2KeyTransactionsJSONGetParams{

		Context: ctx,
	}
}

// NewV2KeyTransactionsJSONGetParamsWithHTTPClient creates a new V2KeyTransactionsJSONGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV2KeyTransactionsJSONGetParamsWithHTTPClient(client *http.Client) *V2KeyTransactionsJSONGetParams {
	var ()
	return &V2KeyTransactionsJSONGetParams{
		HTTPClient: client,
	}
}

/*V2KeyTransactionsJSONGetParams contains all the parameters to send to the API endpoint
for the v2 key transactions Json get operation typically these are written to a http.Request
*/
type V2KeyTransactionsJSONGetParams struct {

	/*FilterIds
	  Filter by policy IDs

	*/
	FilterIds []int64
	/*FilterName
	  Filter by name

	*/
	FilterName *string
	/*Page
	  Pagination index

	*/
	Page *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v2 key transactions Json get params
func (o *V2KeyTransactionsJSONGetParams) WithTimeout(timeout time.Duration) *V2KeyTransactionsJSONGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v2 key transactions Json get params
func (o *V2KeyTransactionsJSONGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v2 key transactions Json get params
func (o *V2KeyTransactionsJSONGetParams) WithContext(ctx context.Context) *V2KeyTransactionsJSONGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v2 key transactions Json get params
func (o *V2KeyTransactionsJSONGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v2 key transactions Json get params
func (o *V2KeyTransactionsJSONGetParams) WithHTTPClient(client *http.Client) *V2KeyTransactionsJSONGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v2 key transactions Json get params
func (o *V2KeyTransactionsJSONGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterIds adds the filterIds to the v2 key transactions Json get params
func (o *V2KeyTransactionsJSONGetParams) WithFilterIds(filterIds []int64) *V2KeyTransactionsJSONGetParams {
	o.SetFilterIds(filterIds)
	return o
}

// SetFilterIds adds the filterIds to the v2 key transactions Json get params
func (o *V2KeyTransactionsJSONGetParams) SetFilterIds(filterIds []int64) {
	o.FilterIds = filterIds
}

// WithFilterName adds the filterName to the v2 key transactions Json get params
func (o *V2KeyTransactionsJSONGetParams) WithFilterName(filterName *string) *V2KeyTransactionsJSONGetParams {
	o.SetFilterName(filterName)
	return o
}

// SetFilterName adds the filterName to the v2 key transactions Json get params
func (o *V2KeyTransactionsJSONGetParams) SetFilterName(filterName *string) {
	o.FilterName = filterName
}

// WithPage adds the page to the v2 key transactions Json get params
func (o *V2KeyTransactionsJSONGetParams) WithPage(page *int64) *V2KeyTransactionsJSONGetParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the v2 key transactions Json get params
func (o *V2KeyTransactionsJSONGetParams) SetPage(page *int64) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *V2KeyTransactionsJSONGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	var valuesFilterIds []string
	for _, v := range o.FilterIds {
		valuesFilterIds = append(valuesFilterIds, swag.FormatInt64(v))
	}

	joinedFilterIds := swag.JoinByFormat(valuesFilterIds, "csv")
	// query array param filter[ids]
	if err := r.SetQueryParam("filter[ids]", joinedFilterIds...); err != nil {
		return err
	}

	if o.FilterName != nil {

		// query param filter[name]
		var qrFilterName string
		if o.FilterName != nil {
			qrFilterName = *o.FilterName
		}
		qFilterName := qrFilterName
		if qFilterName != "" {
			if err := r.SetQueryParam("filter[name]", qFilterName); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
