// Code generated by go-swagger; DO NOT EDIT.

package alerts_plugins_conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new alerts plugins conditions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for alerts plugins conditions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
V2AlertsPluginsConditionsJSONByConditionIDDelete deletes

Delete
*/
func (a *Client) V2AlertsPluginsConditionsJSONByConditionIDDelete(params *V2AlertsPluginsConditionsJSONByConditionIDDeleteParams) (*V2AlertsPluginsConditionsJSONByConditionIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsPluginsConditionsJSONByConditionIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsPluginsConditionsJsonByConditionIdDelete",
		Method:             "DELETE",
		PathPattern:        "/v2/alerts_plugins_conditions/{condition_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsPluginsConditionsJSONByConditionIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsPluginsConditionsJSONByConditionIDDeleteOK), nil

}

/*
V2AlertsPluginsConditionsJSONByIDPut updates

Update
*/
func (a *Client) V2AlertsPluginsConditionsJSONByIDPut(params *V2AlertsPluginsConditionsJSONByIDPutParams) (*V2AlertsPluginsConditionsJSONByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsPluginsConditionsJSONByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsPluginsConditionsJsonByIdPut",
		Method:             "PUT",
		PathPattern:        "/v2/alerts_plugins_conditions/{condition_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsPluginsConditionsJSONByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsPluginsConditionsJSONByIDPutOK), nil

}

/*
V2AlertsPluginsConditionsJSONGet lists

List
*/
func (a *Client) V2AlertsPluginsConditionsJSONGet(params *V2AlertsPluginsConditionsJSONGetParams) (*V2AlertsPluginsConditionsJSONGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsPluginsConditionsJSONGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsPluginsConditionsJsonGet",
		Method:             "GET",
		PathPattern:        "/v2/alerts_plugins_conditions.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsPluginsConditionsJSONGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsPluginsConditionsJSONGetOK), nil

}

/*
V2AlertsPluginsConditionsPoliciesJSONByPolicyIDPost creates

Create
*/
func (a *Client) V2AlertsPluginsConditionsPoliciesJSONByPolicyIDPost(params *V2AlertsPluginsConditionsPoliciesJSONByPolicyIDPostParams) (*V2AlertsPluginsConditionsPoliciesJSONByPolicyIDPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsPluginsConditionsPoliciesJSONByPolicyIDPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsPluginsConditionsPoliciesJsonByPolicyIdPost",
		Method:             "POST",
		PathPattern:        "/v2/alerts_plugins_conditions/policies/{policy_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsPluginsConditionsPoliciesJSONByPolicyIDPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsPluginsConditionsPoliciesJSONByPolicyIDPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
