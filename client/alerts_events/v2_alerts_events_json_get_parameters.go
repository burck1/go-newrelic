// Code generated by go-swagger; DO NOT EDIT.

package alerts_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewV2AlertsEventsJSONGetParams creates a new V2AlertsEventsJSONGetParams object
// with the default values initialized.
func NewV2AlertsEventsJSONGetParams() *V2AlertsEventsJSONGetParams {
	var ()
	return &V2AlertsEventsJSONGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV2AlertsEventsJSONGetParamsWithTimeout creates a new V2AlertsEventsJSONGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV2AlertsEventsJSONGetParamsWithTimeout(timeout time.Duration) *V2AlertsEventsJSONGetParams {
	var ()
	return &V2AlertsEventsJSONGetParams{

		timeout: timeout,
	}
}

// NewV2AlertsEventsJSONGetParamsWithContext creates a new V2AlertsEventsJSONGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewV2AlertsEventsJSONGetParamsWithContext(ctx context.Context) *V2AlertsEventsJSONGetParams {
	var ()
	return &V2AlertsEventsJSONGetParams{

		Context: ctx,
	}
}

// NewV2AlertsEventsJSONGetParamsWithHTTPClient creates a new V2AlertsEventsJSONGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV2AlertsEventsJSONGetParamsWithHTTPClient(client *http.Client) *V2AlertsEventsJSONGetParams {
	var ()
	return &V2AlertsEventsJSONGetParams{
		HTTPClient: client,
	}
}

/*V2AlertsEventsJSONGetParams contains all the parameters to send to the API endpoint
for the v2 alerts events Json get operation typically these are written to a http.Request
*/
type V2AlertsEventsJSONGetParams struct {

	/*FilterEntityGroupID
	  Filter by entity group ID

	*/
	FilterEntityGroupID *int64
	/*FilterEntityID
	  Filter by entity ID

	*/
	FilterEntityID *int64
	/*FilterEntityType
	  Filter by entity type

	*/
	FilterEntityType *string
	/*FilterEventType
	  Filter by event type

	*/
	FilterEventType *string
	/*FilterIncidentID
	  Filter by incident id

	*/
	FilterIncidentID *int64
	/*FilterProduct
	  Filter by New Relic product

	*/
	FilterProduct *string
	/*Page
	  Pagination index

	*/
	Page *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) WithTimeout(timeout time.Duration) *V2AlertsEventsJSONGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) WithContext(ctx context.Context) *V2AlertsEventsJSONGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) WithHTTPClient(client *http.Client) *V2AlertsEventsJSONGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterEntityGroupID adds the filterEntityGroupID to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) WithFilterEntityGroupID(filterEntityGroupID *int64) *V2AlertsEventsJSONGetParams {
	o.SetFilterEntityGroupID(filterEntityGroupID)
	return o
}

// SetFilterEntityGroupID adds the filterEntityGroupId to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) SetFilterEntityGroupID(filterEntityGroupID *int64) {
	o.FilterEntityGroupID = filterEntityGroupID
}

// WithFilterEntityID adds the filterEntityID to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) WithFilterEntityID(filterEntityID *int64) *V2AlertsEventsJSONGetParams {
	o.SetFilterEntityID(filterEntityID)
	return o
}

// SetFilterEntityID adds the filterEntityId to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) SetFilterEntityID(filterEntityID *int64) {
	o.FilterEntityID = filterEntityID
}

// WithFilterEntityType adds the filterEntityType to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) WithFilterEntityType(filterEntityType *string) *V2AlertsEventsJSONGetParams {
	o.SetFilterEntityType(filterEntityType)
	return o
}

// SetFilterEntityType adds the filterEntityType to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) SetFilterEntityType(filterEntityType *string) {
	o.FilterEntityType = filterEntityType
}

// WithFilterEventType adds the filterEventType to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) WithFilterEventType(filterEventType *string) *V2AlertsEventsJSONGetParams {
	o.SetFilterEventType(filterEventType)
	return o
}

// SetFilterEventType adds the filterEventType to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) SetFilterEventType(filterEventType *string) {
	o.FilterEventType = filterEventType
}

// WithFilterIncidentID adds the filterIncidentID to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) WithFilterIncidentID(filterIncidentID *int64) *V2AlertsEventsJSONGetParams {
	o.SetFilterIncidentID(filterIncidentID)
	return o
}

// SetFilterIncidentID adds the filterIncidentId to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) SetFilterIncidentID(filterIncidentID *int64) {
	o.FilterIncidentID = filterIncidentID
}

// WithFilterProduct adds the filterProduct to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) WithFilterProduct(filterProduct *string) *V2AlertsEventsJSONGetParams {
	o.SetFilterProduct(filterProduct)
	return o
}

// SetFilterProduct adds the filterProduct to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) SetFilterProduct(filterProduct *string) {
	o.FilterProduct = filterProduct
}

// WithPage adds the page to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) WithPage(page *int64) *V2AlertsEventsJSONGetParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the v2 alerts events Json get params
func (o *V2AlertsEventsJSONGetParams) SetPage(page *int64) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *V2AlertsEventsJSONGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterEntityGroupID != nil {

		// query param filter[entity_group_id]
		var qrFilterEntityGroupID int64
		if o.FilterEntityGroupID != nil {
			qrFilterEntityGroupID = *o.FilterEntityGroupID
		}
		qFilterEntityGroupID := swag.FormatInt64(qrFilterEntityGroupID)
		if qFilterEntityGroupID != "" {
			if err := r.SetQueryParam("filter[entity_group_id]", qFilterEntityGroupID); err != nil {
				return err
			}
		}

	}

	if o.FilterEntityID != nil {

		// query param filter[entity_id]
		var qrFilterEntityID int64
		if o.FilterEntityID != nil {
			qrFilterEntityID = *o.FilterEntityID
		}
		qFilterEntityID := swag.FormatInt64(qrFilterEntityID)
		if qFilterEntityID != "" {
			if err := r.SetQueryParam("filter[entity_id]", qFilterEntityID); err != nil {
				return err
			}
		}

	}

	if o.FilterEntityType != nil {

		// query param filter[entity_type]
		var qrFilterEntityType string
		if o.FilterEntityType != nil {
			qrFilterEntityType = *o.FilterEntityType
		}
		qFilterEntityType := qrFilterEntityType
		if qFilterEntityType != "" {
			if err := r.SetQueryParam("filter[entity_type]", qFilterEntityType); err != nil {
				return err
			}
		}

	}

	if o.FilterEventType != nil {

		// query param filter[event_type]
		var qrFilterEventType string
		if o.FilterEventType != nil {
			qrFilterEventType = *o.FilterEventType
		}
		qFilterEventType := qrFilterEventType
		if qFilterEventType != "" {
			if err := r.SetQueryParam("filter[event_type]", qFilterEventType); err != nil {
				return err
			}
		}

	}

	if o.FilterIncidentID != nil {

		// query param filter[incident_id]
		var qrFilterIncidentID int64
		if o.FilterIncidentID != nil {
			qrFilterIncidentID = *o.FilterIncidentID
		}
		qFilterIncidentID := swag.FormatInt64(qrFilterIncidentID)
		if qFilterIncidentID != "" {
			if err := r.SetQueryParam("filter[incident_id]", qFilterIncidentID); err != nil {
				return err
			}
		}

	}

	if o.FilterProduct != nil {

		// query param filter[product]
		var qrFilterProduct string
		if o.FilterProduct != nil {
			qrFilterProduct = *o.FilterProduct
		}
		qFilterProduct := qrFilterProduct
		if qFilterProduct != "" {
			if err := r.SetQueryParam("filter[product]", qFilterProduct); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
