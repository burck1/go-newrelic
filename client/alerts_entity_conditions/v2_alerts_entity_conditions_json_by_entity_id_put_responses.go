// Code generated by go-swagger; DO NOT EDIT.

package alerts_entity_conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/burck1/go-newrelic/models"
)

// V2AlertsEntityConditionsJSONByEntityIDPutReader is a Reader for the V2AlertsEntityConditionsJSONByEntityIDPut structure.
type V2AlertsEntityConditionsJSONByEntityIDPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V2AlertsEntityConditionsJSONByEntityIDPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewV2AlertsEntityConditionsJSONByEntityIDPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewV2AlertsEntityConditionsJSONByEntityIDPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewV2AlertsEntityConditionsJSONByEntityIDPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewV2AlertsEntityConditionsJSONByEntityIDPutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewV2AlertsEntityConditionsJSONByEntityIDPutNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewV2AlertsEntityConditionsJSONByEntityIDPutUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewV2AlertsEntityConditionsJSONByEntityIDPutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewV2AlertsEntityConditionsJSONByEntityIDPutOK creates a V2AlertsEntityConditionsJSONByEntityIDPutOK with default headers values
func NewV2AlertsEntityConditionsJSONByEntityIDPutOK() *V2AlertsEntityConditionsJSONByEntityIDPutOK {
	return &V2AlertsEntityConditionsJSONByEntityIDPutOK{}
}

/*V2AlertsEntityConditionsJSONByEntityIDPutOK handles this case with default header values.

OK
*/
type V2AlertsEntityConditionsJSONByEntityIDPutOK struct {
	Payload *models.ConditionResponse
}

func (o *V2AlertsEntityConditionsJSONByEntityIDPutOK) Error() string {
	return fmt.Sprintf("[PUT /v2/alerts_entity_conditions/{entity_id}.json][%d] v2AlertsEntityConditionsJsonByEntityIdPutOK  %+v", 200, o.Payload)
}

func (o *V2AlertsEntityConditionsJSONByEntityIDPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConditionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AlertsEntityConditionsJSONByEntityIDPutUnauthorized creates a V2AlertsEntityConditionsJSONByEntityIDPutUnauthorized with default headers values
func NewV2AlertsEntityConditionsJSONByEntityIDPutUnauthorized() *V2AlertsEntityConditionsJSONByEntityIDPutUnauthorized {
	return &V2AlertsEntityConditionsJSONByEntityIDPutUnauthorized{}
}

/*V2AlertsEntityConditionsJSONByEntityIDPutUnauthorized handles this case with default header values.

Invalid API key
*/
type V2AlertsEntityConditionsJSONByEntityIDPutUnauthorized struct {
	Payload interface{}
}

func (o *V2AlertsEntityConditionsJSONByEntityIDPutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v2/alerts_entity_conditions/{entity_id}.json][%d] v2AlertsEntityConditionsJsonByEntityIdPutUnauthorized  %+v", 401, o.Payload)
}

func (o *V2AlertsEntityConditionsJSONByEntityIDPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AlertsEntityConditionsJSONByEntityIDPutForbidden creates a V2AlertsEntityConditionsJSONByEntityIDPutForbidden with default headers values
func NewV2AlertsEntityConditionsJSONByEntityIDPutForbidden() *V2AlertsEntityConditionsJSONByEntityIDPutForbidden {
	return &V2AlertsEntityConditionsJSONByEntityIDPutForbidden{}
}

/*V2AlertsEntityConditionsJSONByEntityIDPutForbidden handles this case with default header values.

New Relic API access has not been enabled
*/
type V2AlertsEntityConditionsJSONByEntityIDPutForbidden struct {
	Payload interface{}
}

func (o *V2AlertsEntityConditionsJSONByEntityIDPutForbidden) Error() string {
	return fmt.Sprintf("[PUT /v2/alerts_entity_conditions/{entity_id}.json][%d] v2AlertsEntityConditionsJsonByEntityIdPutForbidden  %+v", 403, o.Payload)
}

func (o *V2AlertsEntityConditionsJSONByEntityIDPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AlertsEntityConditionsJSONByEntityIDPutNotFound creates a V2AlertsEntityConditionsJSONByEntityIDPutNotFound with default headers values
func NewV2AlertsEntityConditionsJSONByEntityIDPutNotFound() *V2AlertsEntityConditionsJSONByEntityIDPutNotFound {
	return &V2AlertsEntityConditionsJSONByEntityIDPutNotFound{}
}

/*V2AlertsEntityConditionsJSONByEntityIDPutNotFound handles this case with default header values.

No Alerts condition found with the given ID
*/
type V2AlertsEntityConditionsJSONByEntityIDPutNotFound struct {
	Payload interface{}
}

func (o *V2AlertsEntityConditionsJSONByEntityIDPutNotFound) Error() string {
	return fmt.Sprintf("[PUT /v2/alerts_entity_conditions/{entity_id}.json][%d] v2AlertsEntityConditionsJsonByEntityIdPutNotFound  %+v", 404, o.Payload)
}

func (o *V2AlertsEntityConditionsJSONByEntityIDPutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AlertsEntityConditionsJSONByEntityIDPutNotAcceptable creates a V2AlertsEntityConditionsJSONByEntityIDPutNotAcceptable with default headers values
func NewV2AlertsEntityConditionsJSONByEntityIDPutNotAcceptable() *V2AlertsEntityConditionsJSONByEntityIDPutNotAcceptable {
	return &V2AlertsEntityConditionsJSONByEntityIDPutNotAcceptable{}
}

/*V2AlertsEntityConditionsJSONByEntityIDPutNotAcceptable handles this case with default header values.

Bad entity type
*/
type V2AlertsEntityConditionsJSONByEntityIDPutNotAcceptable struct {
	Payload interface{}
}

func (o *V2AlertsEntityConditionsJSONByEntityIDPutNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /v2/alerts_entity_conditions/{entity_id}.json][%d] v2AlertsEntityConditionsJsonByEntityIdPutNotAcceptable  %+v", 406, o.Payload)
}

func (o *V2AlertsEntityConditionsJSONByEntityIDPutNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AlertsEntityConditionsJSONByEntityIDPutUnprocessableEntity creates a V2AlertsEntityConditionsJSONByEntityIDPutUnprocessableEntity with default headers values
func NewV2AlertsEntityConditionsJSONByEntityIDPutUnprocessableEntity() *V2AlertsEntityConditionsJSONByEntityIDPutUnprocessableEntity {
	return &V2AlertsEntityConditionsJSONByEntityIDPutUnprocessableEntity{}
}

/*V2AlertsEntityConditionsJSONByEntityIDPutUnprocessableEntity handles this case with default header values.

Validation or internal error occurred while trying to add the Alerts entity
*/
type V2AlertsEntityConditionsJSONByEntityIDPutUnprocessableEntity struct {
	Payload interface{}
}

func (o *V2AlertsEntityConditionsJSONByEntityIDPutUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /v2/alerts_entity_conditions/{entity_id}.json][%d] v2AlertsEntityConditionsJsonByEntityIdPutUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *V2AlertsEntityConditionsJSONByEntityIDPutUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AlertsEntityConditionsJSONByEntityIDPutDefault creates a V2AlertsEntityConditionsJSONByEntityIDPutDefault with default headers values
func NewV2AlertsEntityConditionsJSONByEntityIDPutDefault(code int) *V2AlertsEntityConditionsJSONByEntityIDPutDefault {
	return &V2AlertsEntityConditionsJSONByEntityIDPutDefault{
		_statusCode: code,
	}
}

/*V2AlertsEntityConditionsJSONByEntityIDPutDefault handles this case with default header values.

A server error occurred, please contact <a href="http://support.newrelic.com">New Relic support</a>
*/
type V2AlertsEntityConditionsJSONByEntityIDPutDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the v2 alerts entity conditions Json by entity Id put default response
func (o *V2AlertsEntityConditionsJSONByEntityIDPutDefault) Code() int {
	return o._statusCode
}

func (o *V2AlertsEntityConditionsJSONByEntityIDPutDefault) Error() string {
	return fmt.Sprintf("[PUT /v2/alerts_entity_conditions/{entity_id}.json][%d] V2AlertsEntityConditionsJsonByEntityIdPut default  %+v", o._statusCode, o.Payload)
}

func (o *V2AlertsEntityConditionsJSONByEntityIDPutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
