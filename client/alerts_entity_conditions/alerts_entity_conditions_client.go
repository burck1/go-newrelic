// Code generated by go-swagger; DO NOT EDIT.

package alerts_entity_conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new alerts entity conditions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for alerts entity conditions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
V2AlertsEntityConditionsJSONByEntityIDDelete removes

Remove
*/
func (a *Client) V2AlertsEntityConditionsJSONByEntityIDDelete(params *V2AlertsEntityConditionsJSONByEntityIDDeleteParams) (*V2AlertsEntityConditionsJSONByEntityIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsEntityConditionsJSONByEntityIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsEntityConditionsJsonByEntityIdDelete",
		Method:             "DELETE",
		PathPattern:        "/v2/alerts_entity_conditions/{entity_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsEntityConditionsJSONByEntityIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsEntityConditionsJSONByEntityIDDeleteOK), nil

}

/*
V2AlertsEntityConditionsJSONByEntityIDGet lists

List
*/
func (a *Client) V2AlertsEntityConditionsJSONByEntityIDGet(params *V2AlertsEntityConditionsJSONByEntityIDGetParams) (*V2AlertsEntityConditionsJSONByEntityIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsEntityConditionsJSONByEntityIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsEntityConditionsJsonByEntityIdGet",
		Method:             "GET",
		PathPattern:        "/v2/alerts_entity_conditions/{entity_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsEntityConditionsJSONByEntityIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsEntityConditionsJSONByEntityIDGetOK), nil

}

/*
V2AlertsEntityConditionsJSONByEntityIDPut adds

Add
*/
func (a *Client) V2AlertsEntityConditionsJSONByEntityIDPut(params *V2AlertsEntityConditionsJSONByEntityIDPutParams) (*V2AlertsEntityConditionsJSONByEntityIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AlertsEntityConditionsJSONByEntityIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V2AlertsEntityConditionsJsonByEntityIdPut",
		Method:             "PUT",
		PathPattern:        "/v2/alerts_entity_conditions/{entity_id}.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AlertsEntityConditionsJSONByEntityIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V2AlertsEntityConditionsJSONByEntityIDPutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
