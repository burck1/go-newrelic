// Code generated by go-swagger; DO NOT EDIT.

package alerts_entity_conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewV2AlertsEntityConditionsJSONByEntityIDPutParams creates a new V2AlertsEntityConditionsJSONByEntityIDPutParams object
// with the default values initialized.
func NewV2AlertsEntityConditionsJSONByEntityIDPutParams() *V2AlertsEntityConditionsJSONByEntityIDPutParams {
	var ()
	return &V2AlertsEntityConditionsJSONByEntityIDPutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV2AlertsEntityConditionsJSONByEntityIDPutParamsWithTimeout creates a new V2AlertsEntityConditionsJSONByEntityIDPutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV2AlertsEntityConditionsJSONByEntityIDPutParamsWithTimeout(timeout time.Duration) *V2AlertsEntityConditionsJSONByEntityIDPutParams {
	var ()
	return &V2AlertsEntityConditionsJSONByEntityIDPutParams{

		timeout: timeout,
	}
}

// NewV2AlertsEntityConditionsJSONByEntityIDPutParamsWithContext creates a new V2AlertsEntityConditionsJSONByEntityIDPutParams object
// with the default values initialized, and the ability to set a context for a request
func NewV2AlertsEntityConditionsJSONByEntityIDPutParamsWithContext(ctx context.Context) *V2AlertsEntityConditionsJSONByEntityIDPutParams {
	var ()
	return &V2AlertsEntityConditionsJSONByEntityIDPutParams{

		Context: ctx,
	}
}

// NewV2AlertsEntityConditionsJSONByEntityIDPutParamsWithHTTPClient creates a new V2AlertsEntityConditionsJSONByEntityIDPutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV2AlertsEntityConditionsJSONByEntityIDPutParamsWithHTTPClient(client *http.Client) *V2AlertsEntityConditionsJSONByEntityIDPutParams {
	var ()
	return &V2AlertsEntityConditionsJSONByEntityIDPutParams{
		HTTPClient: client,
	}
}

/*V2AlertsEntityConditionsJSONByEntityIDPutParams contains all the parameters to send to the API endpoint
for the v2 alerts entity conditions Json by entity Id put operation typically these are written to a http.Request
*/
type V2AlertsEntityConditionsJSONByEntityIDPutParams struct {

	/*ConditionID
	  Alerts condition ID

	*/
	ConditionID int64
	/*EntityID
	  Entity id to add

	*/
	EntityID int64
	/*EntityType
	  Entity Type

	*/
	EntityType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v2 alerts entity conditions Json by entity Id put params
func (o *V2AlertsEntityConditionsJSONByEntityIDPutParams) WithTimeout(timeout time.Duration) *V2AlertsEntityConditionsJSONByEntityIDPutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v2 alerts entity conditions Json by entity Id put params
func (o *V2AlertsEntityConditionsJSONByEntityIDPutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v2 alerts entity conditions Json by entity Id put params
func (o *V2AlertsEntityConditionsJSONByEntityIDPutParams) WithContext(ctx context.Context) *V2AlertsEntityConditionsJSONByEntityIDPutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v2 alerts entity conditions Json by entity Id put params
func (o *V2AlertsEntityConditionsJSONByEntityIDPutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v2 alerts entity conditions Json by entity Id put params
func (o *V2AlertsEntityConditionsJSONByEntityIDPutParams) WithHTTPClient(client *http.Client) *V2AlertsEntityConditionsJSONByEntityIDPutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v2 alerts entity conditions Json by entity Id put params
func (o *V2AlertsEntityConditionsJSONByEntityIDPutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConditionID adds the conditionID to the v2 alerts entity conditions Json by entity Id put params
func (o *V2AlertsEntityConditionsJSONByEntityIDPutParams) WithConditionID(conditionID int64) *V2AlertsEntityConditionsJSONByEntityIDPutParams {
	o.SetConditionID(conditionID)
	return o
}

// SetConditionID adds the conditionId to the v2 alerts entity conditions Json by entity Id put params
func (o *V2AlertsEntityConditionsJSONByEntityIDPutParams) SetConditionID(conditionID int64) {
	o.ConditionID = conditionID
}

// WithEntityID adds the entityID to the v2 alerts entity conditions Json by entity Id put params
func (o *V2AlertsEntityConditionsJSONByEntityIDPutParams) WithEntityID(entityID int64) *V2AlertsEntityConditionsJSONByEntityIDPutParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the v2 alerts entity conditions Json by entity Id put params
func (o *V2AlertsEntityConditionsJSONByEntityIDPutParams) SetEntityID(entityID int64) {
	o.EntityID = entityID
}

// WithEntityType adds the entityType to the v2 alerts entity conditions Json by entity Id put params
func (o *V2AlertsEntityConditionsJSONByEntityIDPutParams) WithEntityType(entityType string) *V2AlertsEntityConditionsJSONByEntityIDPutParams {
	o.SetEntityType(entityType)
	return o
}

// SetEntityType adds the entityType to the v2 alerts entity conditions Json by entity Id put params
func (o *V2AlertsEntityConditionsJSONByEntityIDPutParams) SetEntityType(entityType string) {
	o.EntityType = entityType
}

// WriteToRequest writes these params to a swagger request
func (o *V2AlertsEntityConditionsJSONByEntityIDPutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param condition_id
	qrConditionID := o.ConditionID
	qConditionID := swag.FormatInt64(qrConditionID)
	if qConditionID != "" {
		if err := r.SetQueryParam("condition_id", qConditionID); err != nil {
			return err
		}
	}

	// path param entity_id
	if err := r.SetPathParam("entity_id", swag.FormatInt64(o.EntityID)); err != nil {
		return err
	}

	// query param entity_type
	qrEntityType := o.EntityType
	qEntityType := qrEntityType
	if qEntityType != "" {
		if err := r.SetQueryParam("entity_type", qEntityType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
