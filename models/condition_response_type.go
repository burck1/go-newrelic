// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ConditionResponseType ConditionResponseType
// swagger:model ConditionResponseType
type ConditionResponseType struct {

	// condition scope
	ConditionScope string `json:"condition_scope,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// entities
	Entities []int32 `json:"entities"`

	// gc metric
	GcMetric string `json:"gc_metric,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// metric
	Metric string `json:"metric,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// runbook url
	RunbookURL string `json:"runbook_url,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// user defined
	UserDefined *UserDefinedConditionResponse `json:"user_defined,omitempty"`

	// violation close timer
	ViolationCloseTimer int32 `json:"violation_close_timer,omitempty"`
}

// Validate validates this condition response type
func (m *ConditionResponseType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserDefined(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConditionResponseType) validateUserDefined(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDefined) { // not required
		return nil
	}

	if m.UserDefined != nil {
		if err := m.UserDefined.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_defined")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConditionResponseType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConditionResponseType) UnmarshalBinary(b []byte) error {
	var res ConditionResponseType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
