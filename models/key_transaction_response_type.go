// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KeyTransactionResponseType KeyTransactionResponseType
// swagger:model KeyTransactionResponseType
type KeyTransactionResponseType struct {

	// application summary
	ApplicationSummary *AppSummaryResponse `json:"application_summary,omitempty"`

	// end user summary
	EndUserSummary *EndUserSummaryResponse `json:"end_user_summary,omitempty"`

	// health status
	HealthStatus string `json:"health_status,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// last reported at
	// Format: date-time
	LastReportedAt strfmt.DateTime `json:"last_reported_at,omitempty"`

	// links
	Links *KeyTransactionLinksResponse `json:"links,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// reporting
	Reporting bool `json:"reporting,omitempty"`

	// transaction name
	TransactionName string `json:"transaction_name,omitempty"`
}

// Validate validates this key transaction response type
func (m *KeyTransactionResponseType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndUserSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastReportedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyTransactionResponseType) validateApplicationSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicationSummary) { // not required
		return nil
	}

	if m.ApplicationSummary != nil {
		if err := m.ApplicationSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application_summary")
			}
			return err
		}
	}

	return nil
}

func (m *KeyTransactionResponseType) validateEndUserSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.EndUserSummary) { // not required
		return nil
	}

	if m.EndUserSummary != nil {
		if err := m.EndUserSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("end_user_summary")
			}
			return err
		}
	}

	return nil
}

func (m *KeyTransactionResponseType) validateLastReportedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastReportedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_reported_at", "body", "date-time", m.LastReportedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KeyTransactionResponseType) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KeyTransactionResponseType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyTransactionResponseType) UnmarshalBinary(b []byte) error {
	var res KeyTransactionResponseType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
