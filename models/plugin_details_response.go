// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PluginDetailsResponse PluginDetailsResponse
// swagger:model PluginDetailsResponse
type PluginDetailsResponse struct {

	// branding image url
	BrandingImageURL string `json:"branding_image_url,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// description
	Description int32 `json:"description,omitempty"`

	// download url
	DownloadURL string `json:"download_url,omitempty"`

	// first edited at
	// Format: date-time
	FirstEditedAt strfmt.DateTime `json:"first_edited_at,omitempty"`

	// first published at
	// Format: date-time
	FirstPublishedAt strfmt.DateTime `json:"first_published_at,omitempty"`

	// has unpublished changes
	HasUnpublishedChanges bool `json:"has_unpublished_changes,omitempty"`

	// is public
	IsPublic string `json:"is_public,omitempty"`

	// last edited at
	// Format: date-time
	LastEditedAt strfmt.DateTime `json:"last_edited_at,omitempty"`

	// last published at
	// Format: date-time
	LastPublishedAt strfmt.DateTime `json:"last_published_at,omitempty"`

	// published version
	PublishedVersion string `json:"published_version,omitempty"`

	// publisher about url
	PublisherAboutURL string `json:"publisher_about_url,omitempty"`

	// publisher support url
	PublisherSupportURL string `json:"publisher_support_url,omitempty"`

	// short name
	ShortName string `json:"short_name,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// upgraded at
	// Format: date-time
	UpgradedAt strfmt.DateTime `json:"upgraded_at,omitempty"`
}

// Validate validates this plugin details response
func (m *PluginDetailsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstEditedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstPublishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastEditedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastPublishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PluginDetailsResponse) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PluginDetailsResponse) validateFirstEditedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstEditedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("first_edited_at", "body", "date-time", m.FirstEditedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PluginDetailsResponse) validateFirstPublishedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstPublishedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("first_published_at", "body", "date-time", m.FirstPublishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PluginDetailsResponse) validateLastEditedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastEditedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_edited_at", "body", "date-time", m.LastEditedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PluginDetailsResponse) validateLastPublishedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastPublishedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_published_at", "body", "date-time", m.LastPublishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PluginDetailsResponse) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PluginDetailsResponse) validateUpgradedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpgradedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("upgraded_at", "body", "date-time", m.UpgradedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PluginDetailsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginDetailsResponse) UnmarshalBinary(b []byte) error {
	var res PluginDetailsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
