// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ViolationResponseType ViolationResponseType
// swagger:model ViolationResponseType
type ViolationResponseType struct {

	// closed at
	ClosedAt int32 `json:"closed_at,omitempty"`

	// condition name
	ConditionName string `json:"condition_name,omitempty"`

	// duration
	Duration int32 `json:"duration,omitempty"`

	// entity
	Entity *ViolationEntityResponse `json:"entity,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// links
	Links *ViolationLinksResponse `json:"links,omitempty"`

	// opened at
	OpenedAt int32 `json:"opened_at,omitempty"`

	// policy name
	PolicyName string `json:"policy_name,omitempty"`

	// priority
	Priority string `json:"priority,omitempty"`
}

// Validate validates this violation response type
func (m *ViolationResponseType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViolationResponseType) validateEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

func (m *ViolationResponseType) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViolationResponseType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViolationResponseType) UnmarshalBinary(b []byte) error {
	var res ViolationResponseType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
