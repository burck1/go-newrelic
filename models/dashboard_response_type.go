// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DashboardResponseType DashboardResponseType
// swagger:model DashboardResponseType
type DashboardResponseType struct {

	// api url
	APIURL string `json:"api_url,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// editable
	Editable string `json:"editable,omitempty"`

	// filter
	Filter *DashboardResponseTypeFilter `json:"filter,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// metadata
	Metadata *DashboardResponseTypeMetadata `json:"metadata,omitempty"`

	// owner email
	OwnerEmail string `json:"owner_email,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// ui url
	UIURL string `json:"ui_url,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// visibility
	Visibility string `json:"visibility,omitempty"`

	// widgets
	Widgets []interface{} `json:"widgets"`
}

// Validate validates this dashboard response type
func (m *DashboardResponseType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardResponseType) validateFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.Filter) { // not required
		return nil
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardResponseType) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DashboardResponseType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardResponseType) UnmarshalBinary(b []byte) error {
	var res DashboardResponseType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DashboardResponseTypeFilter dashboard response type filter
// swagger:model DashboardResponseTypeFilter
type DashboardResponseTypeFilter struct {

	// attributes
	Attributes []string `json:"attributes"`

	// event types
	EventTypes []string `json:"event_types"`
}

// Validate validates this dashboard response type filter
func (m *DashboardResponseTypeFilter) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DashboardResponseTypeFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardResponseTypeFilter) UnmarshalBinary(b []byte) error {
	var res DashboardResponseTypeFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DashboardResponseTypeMetadata dashboard response type metadata
// swagger:model DashboardResponseTypeMetadata
type DashboardResponseTypeMetadata struct {

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this dashboard response type metadata
func (m *DashboardResponseTypeMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DashboardResponseTypeMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardResponseTypeMetadata) UnmarshalBinary(b []byte) error {
	var res DashboardResponseTypeMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
