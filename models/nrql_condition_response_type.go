// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NrqlConditionResponseType NrqlConditionResponseType
// swagger:model NrqlConditionResponseType
type NrqlConditionResponseType struct {

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// expected groups
	ExpectedGroups int32 `json:"expected_groups,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// ignore overlap
	IgnoreOverlap bool `json:"ignore_overlap,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// nrql
	Nrql *NrqlResponse `json:"nrql,omitempty"`

	// runbook url
	RunbookURL string `json:"runbook_url,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// value function
	ValueFunction string `json:"value_function,omitempty"`
}

// Validate validates this nrql condition response type
func (m *NrqlConditionResponseType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNrql(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NrqlConditionResponseType) validateNrql(formats strfmt.Registry) error {

	if swag.IsZero(m.Nrql) { // not required
		return nil
	}

	if m.Nrql != nil {
		if err := m.Nrql.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nrql")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NrqlConditionResponseType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NrqlConditionResponseType) UnmarshalBinary(b []byte) error {
	var res NrqlConditionResponseType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
