// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventResponseType EventResponseType
// swagger:model EventResponseType
type EventResponseType struct {

	// closed at
	// Format: date-time
	ClosedAt strfmt.DateTime `json:"closed_at,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// level
	Level string `json:"level,omitempty"`

	// links
	Links *EventLinksResponse `json:"links,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// payload
	Payload map[string]interface{} `json:"payload,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this event response type
func (m *EventResponseType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClosedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventResponseType) validateClosedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ClosedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("closed_at", "body", "date-time", m.ClosedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EventResponseType) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EventResponseType) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventResponseType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventResponseType) UnmarshalBinary(b []byte) error {
	var res EventResponseType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
